{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"D\u00e9marrer avec Git","text":""},{"location":"#installation-dun-projet","title":"Installation d\u2019un projet","text":"<p>Le d\u00e9partement Informatique a pour projet de d\u00e9velopper le nouveau site du BUT Informatique.</p> <p>Afin de mener \u00e0 bien ce projet et de ne pas r\u00e9p\u00e9ter les erreurs de d\u00e9veloppement des pr\u00e9c\u00e9dentes \u00e9quipes, Emma et Eric, \u00e9tudiant en BUT Informatique en charge du projet, vont cr\u00e9er un nouvel environnement de travail.</p> <p>Ils vont utiliser  Github afin de pouvoir travailler \u00e0 plusieurs sur un m\u00eame projet et ainsi conserver une trace de tout les modifications ajout\u00e9es au futur nouveau site Web.</p>"},{"location":"#i-creation-du-repository-sur-github","title":"I) Cr\u00e9ation du repository sur Github","text":"<p>Emma est charg\u00e9e de cr\u00e9er l'environnement Github. Pour cela, voici comment elle va proc\u00e9der :</p> <ol> <li>Cr\u00e9ation d\u2019un repository (projet) distant sur Github nomm\u00e9 \"Site-des-informatiques\"</li> <li>Laisser le repository en public</li> <li>Laisser d\u00e9coch\u00e9 le Readme (On en cr\u00e9era un plus tard si besoin)</li> <li>Cliquer sur \"Create repository\"</li> </ol> <p>Success</p> <p>Nous avons maintenant un repository sur Github. Github \u00e9tant un mod\u00e8le d\u00e9centralis\u00e9, nous avons besoin de cr\u00e9er un environnement de travail sur notre machine en local.</p>"},{"location":"#ii-creation-du-repository-en-local","title":"II) Cr\u00e9ation du repository en local","text":"<p>Maintenant qu'Emma \u00e0 cr\u00e9\u00e9 le projet sur Github, elle doit maintenant cr\u00e9er le dossier qui acceuillera le projet sur sa machine, en local.</p> <ol> <li>Cr\u00e9er un dossier sur votre pc</li> <li>L\u2019ouvrir via un environnement de d\u00e9veloppement int\u00e9gr\u00e9 (IDE), ici nous utiliserons Visual Studio Code :     Installer VS Code</li> <li>Ouvrir un Terminal (menu en haut de page : Terminal -&gt; New Terminal)</li> <li>R\u00e9aliser les commandes suivantes dans ce terminal pour mettre en lien votre dossier local avec votre repository Github :<ul> <li><code>git init</code></li> <li><code>git remote add origin https://Github.com/User/Site-des-informatiques.git</code></li> </ul> </li> </ol> <p>Failure</p> <p>Emma a un probl\u00e8me en local, sa branche par d\u00e9faut s'appelle master tandis que dans le repository distant elle s'appelle main. Pour r\u00e9gler ce probl\u00e8me, Emma a la super id\u00e9e d\u2019utiliser la commande suivante :</p> <ul> <li><code>git branch -M main</code>  (renomme la branche master dans laquelle Emma se trouve en main)</li> </ul> <p>Emma peut d\u00e9sormais communiquer proprement avec son repository sur Github !</p> <p>Pour r\u00e9aliser le site, Eric et Emma ont d\u00e9cid\u00e9 d'utiliser un framework back-end bas\u00e9 sur Node.js du nom de Next.Js.</p> <p>Ils installent le projet via Next.Js sur l'ordinateur d'Emma, ce qui am\u00e8ne \u00e0 la construction automatique d'un site basique avec l'ajout de nombreux fichiers (merci Next.Js).</p> <p>Emma part en pause caf\u00e9 et Eric a la \"bonne id\u00e9e\" de supprimer certains fichiers du projet local d'Emma, dont le fichier \".gitignore\".</p> <p>Emma ne le remarque pas et souhaite sauvegarder une premi\u00e8re fois son projet sur Github. Elle utilise la commande suivante :</p> <ul> <li><code>git add --all</code> (ajoute tous les fichiers dans le futurs commit afin de les amener sur le repo distant)</li> </ul> <p>Danger</p> <p>Oh mon dieu ! Tous les modules on \u00e9t\u00e9 ajout\u00e9 dans le <code>commit</code> et ce n'est pas une bonne chose.</p> <p>Si Emma push , \u00e7ela causera de tr\u00e8s gros probl\u00e8mes de place. Les modules npm (install\u00e9s automatiquement lors de l'installation de Next.Js) sont tr\u00e8s nombreux et lourd. </p> <p>Emma se rend compte que quelque chose ne va pas, fait ses recherches et fini par trouver de la documentation sur le fonctionnement du fichier .gitignore. Pour r\u00e9soudre ce probl\u00e8me, il faut recr\u00e9er le fichier .gitignore et le remplir comme ci-dessous : <pre><code># d\u00e9pendances\n/node_modules\n/.pnp\n.pnp.js\n\n# tester\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Fichiers .env locaux\n.env*.local\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n</code></pre></p> <p>Ce fichier permet de ne pas ajouter automatiquement des fichiers / dossiers que l'on ne voudrait pas lors de la commande <code>git add</code> (r\u00e9alisez la commande <code>git add -h</code> pour afficher les diff\u00e9rentes options de cette commande).</p> <p>Elle r\u00e9alise ensuite la commande <code>git status</code> pour v\u00e9rifier si les modules sont toujours dans la Staging Area. La Staging Area est un endroit o\u00f9 se trouvent les fichiers qui vont \u00eatre commit.</p> <p>Warning</p> <p>Les modules sont toujours pr\u00eat \u00e0 \u00eatre commit puisqu'ils sont toujours dans le Staging Area.</p> <p>Pour r\u00e9soudre ce propbl\u00e8me, elle doit r\u00e9aliser la commande <code>git restore --staged .</code> afin enlever les fichiers nodes-modules du Staging Area.</p> <p>Failure</p> <p>Vu qu'Emma n'a pas encore 'commit', le pointeur HEAD (r\u00e9f\u00e9rence au dernier commit r\u00e9alis\u00e9 dans la branche courante) n'a pas \u00e9t\u00e9 cr\u00e9\u00e9, ce qui cr\u00e9e une erreur : </p> <pre><code>fatal: Could not resolve HEAD\n</code></pre> <p>Emma a le bon r\u00e9flexe. Elle va voir la documentation de git pour supprimer un fichier du stage, puis ex\u00e9cute la commande <code>git rm --cached ./node_modules</code>.</p> <p>Comme <code>node_modules</code> est un dossier, l'erreur <code>fatal: Not removing './node_modules' recursively without -r</code> est re\u00e7ue. Elle ajoute donc l'argument <code>-r</code></p> <p>Success</p> <p><code>git rm -r --cached ./node_modules</code>, tout va bien ! Les node_modules ne sont plus dans le stage.</p> <p>D\u00e9sormais, Emma n'a plus de probl\u00e8me avec le <code>.gitignore</code> Emma peut donc essayer d'envoyer son travail sur Github \u00e0 l'aide des commandes suivantes:</p> <ul> <li><code>git add --all</code></li> <li><code>git commit -m \"premier commit\"</code></li> <li><code>git push</code></li> </ul> <p>Failure</p> <p>Une erreur appara\u00eet dans le terminal :</p> <pre><code>fatal: The current branch main has no upstream branch.\n\nTo push the current branch and set the remote as upstream, use    \ngit push --set-upstream origin main    \n\nTo have this happen automatically for branches without a tracking\nupstream, see 'push.autoSetupRemote' in 'git help config'.\n</code></pre> <p>Comme indiqu\u00e9 dans le message d'erreur un simple push pour un premier commit d'une branche ne suffit pas, il faut donc utiliser:</p> <pre><code>`git push --set-upstream origin main`\n</code></pre> <p>Cela va permettre de cr\u00e9er la branche <code>main</code> sur le d\u00e9pot distant puis faire un <code>git push</code> dessus.</p>"},{"location":"#iii-arrive-dun-tier-sur-le-projet","title":"III) Arriv\u00e9 d'un tier sur le projet","text":"<p>Eric veut dor\u00e9navant rejoindre le projet sans devoir aller sur le poste d'Emma.</p>"},{"location":"#1-clone-du-repositoryabrrepo-distant","title":"1. Clone du repository(.abr:repo) distant","text":"<p>Pour se faire Eric doit cloner le repo d'Emma depuis Github.</p> <p><code>git clone lien-ssh-du-repo</code> : voir la documentation sur SSH</p> <p>Success</p> <p>Cela permettra \u00e0 Eric de travailler depuis son poste en local pour ajouter ses modifications et ensuite les commit</p> <p>Ensuite, il doit cr\u00e9er une branche pour \u00e9viter de futurs conflits, pour plus d'informations : Gestion des branches</p>"},{"location":"#2-creation-de-sa-branche","title":"2. Cr\u00e9ation de sa branche","text":"<p>Eric veut maintenant cr\u00e9er un formulaire, il va pour cela, cr\u00e9er une nouvelle branche nomm\u00e9e <code>feature-form</code>.</p> <p>Pour se d\u00e9placer sur sa branche, il utilise la commande : <code>git checkout feature-form</code></p> <p>Failure</p> <p>Une erreur appara\u00eet dans le terminal :</p> <pre><code>error: pathspec 'feature-form' did not match any file(s) known to git\n</code></pre> <p>Ce message nous dit que git n'a pas pu trouver de branche nomm\u00e9 <code>feature-form</code> dans le d\u00e9p\u00f4t Git.</p> <p>Pour r\u00e9soudre ce probl\u00e8me Eric ajoute l'argument <code>-b</code> avant le nom de la branche : <code>git checkout -b feature-form</code></p> <p>Cela va permettre de cr\u00e9er la branche puis de s'y d\u00e9placer.</p> <p>Maintenant il veut v\u00e9rifier qu'il ai bien une nouvelle branche <code>feature-form</code> qui a \u00e9t\u00e9 ajout\u00e9 et qu'il est bien sur cette branche, pour ce faire il utilise : <code>git branch</code></p> <pre><code>  main\n* feature-form\n</code></pre> <p>Il y a bien deux branches et l'asterisque est positionn\u00e9 sur <code>feature-form</code> montrant que c'est la branche active.</p>"},{"location":"#3-construction-du-formulaire","title":"3. Construction du formulaire","text":"<p>Eric d\u00e9veloppe donc un formulaire. Il veut d\u00e9sormais push sa modification sur la branche <code>feature-form</code> distante.</p> <p>Pour ce faire Eric va ex\u00e9cuter les commandes suivantes:</p> <ul> <li> <p><code>git add --all</code></p> </li> <li> <p><code>git commit -m \"feature : create the front of the form\"</code></p> </li> <li> <p><code>git push</code></p> </li> </ul> <p>Failure</p> <p>Une erreur appara\u00eet dans le terminal :</p> <pre><code>fatal: The current branch main has no upstream branch.\n\nTo push the current branch and set the remote as upstream, use    \ngit push --set-upstream origin feature-form    \n\nTo have this happen automatically for branches without a tracking\nupstream, see 'push.autoSetupRemote' in 'git help config'.\n</code></pre> <p>Effectu\u00e9 la commande <code>git push --set-upstream origin feature-form</code> pour cr\u00e9er sur le d\u00e9pot distant la branche <code>feature-form</code> et pousser les modifications sur celle ci. </p> <p>Entre temps Emma a cr\u00e9er sa propre branche bas\u00e9 sur <code>main</code> qui s'appelle <code>feature-form-api</code> (code de l'api pour le formulaire). Elle a push les modifications sur le d\u00e9p\u00f4t distant. Eric pour effectuer des tests de son formulaire, veut r\u00e9cup\u00e9rer le code de la branche d'Emma. Pour ce faire, il va ex\u00e9cuter la commande <code>git rebase feature-form-api</code> depuis sa propre branche. </p> <p>Eric test le bon fonctionnement du formulaire et effectue les modifications n\u00e9cessaires, puis push sur sa branche distante.</p> <p>Danger</p> <p>Emma a r\u00e9alis\u00e9 qu'elle avais mis en clair le mot de passe de la BDD dans un des fichiers qui a \u00e9t\u00e9 commit et pouss\u00e9 sur le d\u00e9p\u00f4t distant.</p> <p>Warning</p> <pre><code>// prisma/schema.prisma\n\ndatasource db {\n    provider = \"postgresql\"\n    url = \"postgresql://johndoe:lemotdepasse@localhost:5432/mydb?schema=public\"\n}\n</code></pre> <p>Voici un graphique repr\u00e9sentant la situation actuelle : <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base', 'themeVariables': {\n              'gitInv3': '#B26EDF',\n              'tagLabelFontSize': '15px',\n              'git0': '#72BE49',\n              'git1': '#B26EDF',\n              'git2': '#1167BD',\n              'git3': '#B26EDF',\n              'git4': '#1167BD',\n              'git5': '#C62817',\n              'git6': '#ff00ff',\n              'git7': '#00ffff',\n              'gitBranchLabel0': '#ffffff',\n              'gitBranchLabel1': '#ffffff',\n              'gitBranchLabel2': '#ffffff',\n              'gitBranchLabel3': '#ffffff',\n              'gitBranchLabel4': '#ffffff',\n              'gitBranchLabel5': '#ffffff',\n              'gitBranchLabel6': '#ffffff',\n              'gitBranchLabel7': '#ffffff',\n              'gitBranchLabel8': '#ffffff',\n              'gitBranchLabel9': '#ffffff'\n       } } }%%\ngitGraph\n   commit id:\" \"\n   branch feature-form\n   checkout feature-form\n   commit id:\"Create form\"\n   checkout main\n   branch origin/api\n   checkout origin/api\n   commit id:\"Create endpoint (fixed)\" type:HIGHLIGHT tag:\"fichier api modifi\u00e9\"</code></pre></p> <p>Puisqu'Emma \u00e0 pousser des donn\u00e9es susceptibles sur Github, il est n\u00e9cessaire de r\u00e9\u00e9crire l'historique git (local et distant) et de d\u00e9placer le mot de passe de la BDD dans le fichier <code>.env</code>. Pour ce faire, elle doit r\u00e9aliser les commandes dans l'ordre suivant :</p> <p>Elle doit tout d'abord enlever le mot de passe du fichier <code>prisma/schema.prisma</code>, puis le placer dans le fichier <code>.env</code> puisque ce dernier est ignor\u00e9 lors de l'envoie sur le repository distant.</p> <p>Success</p> <p><pre><code>// Fichier prisma/schema.prisma\n\ndatasource db {\n    provider = \"postgresql\"\n    url = env(\"DATABASE_URL\")\n}\n</code></pre> <pre><code>// Fichier .env\n\nDATABASE_URL=\"postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public\"\n</code></pre></p> <p>Emma va r\u00e9aliser un nouveau commit de ses fichiers sans le mot de passe :</p> <ul> <li> <p><code>git add --all</code></p> </li> <li> <p><code>git commit -m 'delete sensitive data from schema.prsima file'</code></p> </li> <li> <p><code>git push</code></p> </li> </ul> <p>Emma va ensuite v\u00e9rifier son historique avec <code>git log --oneline</code>.</p> <pre><code>169caa6 (HEAD -&gt; feature-api, origin/feature-api) delete sensitive data from schema.prsima file\ne6ded27 Form API\n\n// Ici, le sha du commit qui contient le mot de passe est 'e6ded27'\n</code></pre> <p>Emma va v\u00e9rifier le commit <code>e6ded27</code> avec <code>git show e6ded27</code>.</p> <p>Elle se rend compte que le mot de passe est toujours accessible dans le fichier <code>prisma/schema.prisma</code>.</p> <p>Il faut r\u00e9\u00e9crire le commit en question en amendant celui-ci pour supprimer toutes les tr\u00e2ces du mot de passe.</p> <p>Pour ce faire, il faut d'abord reset sur le commit contenant le mot de passe : <pre><code>git reset HEAD~1\n\nUnstaged changes after reset:\nM       schema.prisma\n</code></pre></p> <p>Ensuite, il faut amender un commit : <pre><code>git add --all\n\ngit commit --amend -m 'Form API modified'\n/**\n[feature-api 5bbd227] Form API modified\nDate: Thu Jan 18 08:53:36 2024 +0100\n1 file changed, 1 insertion(+), 1 deletion(-)\n*/\n\ngit push --force\n/**\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 297 bytes | 297.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo https://github.com/Emma/Info-website.git\n + 169caa6...5bbd227 feature-api -&gt; feature-api (forced update)\n*/\n</code></pre></p> <p>A ce moment, le commit contenant le mot de passe \u00e0 bien d\u00fb \u00eatre compl\u00e8tement supprimer de l'historique. Pour le v\u00e9rifier : <pre><code>git log --oneline\n5bbd227 (HEAD -&gt; feature-api, origin/feature-api) Form API modified\n8c08eca feature:Create API feature\ne19ceb6 (origin/main, origin/HEAD, main) first commit\n079a6f8 First commit\n</code></pre></p> <p>Success</p> <p>Il n'y a plus aucune tr\u00e2ce du commit <code>e6ded27</code> contenant le mot de passe. Il a bien \u00e9t\u00e9 remplac\u00e9 par le nouveau commit ne contenant pas le mot de passe.</p>"},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/","title":"Installation et fonctionnement docker","text":""},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#installation-et-fonctionnement-de-docker","title":"Installation et Fonctionnement de Docker","text":""},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#quest-ce-que-docker","title":"Qu'est-ce que Docker ?","text":"<p>Docker est une plateforme open source qui permet de d\u00e9velopper, d\u00e9ployer et ex\u00e9cuter des applications dans des conteneurs. </p> <p>Docker facilite la cr\u00e9ation, la distribution et la gestion de ces conteneurs, ce qui en fait un outil tr\u00e8s populaire pour la virtualisation d'applications. </p> <p>Docker est une technologie qui facilite la mise en place, le d\u00e9ploiement et la gestion d'applications dans des environnements conteneuris\u00e9s, offrant ainsi une grande flexibilit\u00e9 et une meilleure efficacit\u00e9 dans le d\u00e9veloppement et l'exploitation des logiciels.</p>"},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#installation","title":"Installation","text":""},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#installer-sous-windows","title":"Installer sous Windows","text":"<p>Il y a deux mani\u00e8res d'installer Docker :</p> <ul> <li> <p>De mani\u00e8re graphique</p> </li> <li> <p>A partir de ligne de commande</p> </li> </ul> <p>De mani\u00e8re graphique :</p> <ol> <li> <p>Double-cliquez sur Docker Desktop Installer.exe pour ex\u00e9cuter le programme d\u2019installation.</p> </li> <li> <p>Assurez-vous que l'option Utiliser WSL 2 au lieu d'Hyper-V sur la page de configuration est s\u00e9lectionn\u00e9e ou non en fonction de votre choix de backend.</p> </li> <li> <p>Suivez les instructions de l'assistant d'installation pour autoriser le programme d'installation et poursuivre l'installation.</p> </li> <li> <p>Une fois l'installation r\u00e9ussie, s\u00e9lectionnez Fermer pour terminer le processus d'installation.</p> </li> <li> <p>Si votre compte administrateur est diff\u00e9rent de votre compte utilisateur, vous devez ajouter l'utilisateur au groupe docker-users . Ex\u00e9cutez Computer Management en tant qu'administrateur et acc\u00e9dez \u00e0 Local Users and Groups &gt; Groups &gt; docker-users . Cliquez avec le bouton droit pour ajouter l'utilisateur au groupe. D\u00e9connectez-vous et reconnectez-vous pour que les modifications prennent effet.</p> </li> </ol> <p>A partir de ligne de commande :</p> <p>Apr\u00e8s avoir t\u00e9l\u00e9charg\u00e9 Docker Desktop Installer.exe , ex\u00e9cutez la commande suivante dans un terminal pour installer Docker Desktop :</p> <pre><code>$ \"Docker Desktop Installer.exe\" install\n</code></pre> <p>Si vous utilisez PowerShell, vous devez l'ex\u00e9cuter comme :</p> <pre><code>Start-Process 'Docker Desktop Installer.exe' -Wait install\n</code></pre> <p>Si vous utilisez l'invite de commande Windows :</p> <pre><code>start /w \"\" \"Docker Desktop Installer.exe\" install\n</code></pre> <p>Si votre compte administrateur est diff\u00e9rent de votre compte utilisateur, vous devez ajouter l'utilisateur au groupe docker-users :</p> <pre><code>$ net localgroup docker-users &lt;user&gt; /add\n</code></pre>"},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#fonctionnement","title":"Fonctionnement","text":""},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#images-docker","title":"Images Docker","text":"<p>Les images Docker sont des mod\u00e8les d'applications contenant tous les \u00e9l\u00e9ments n\u00e9cessaires \u00e0 leur ex\u00e9cution, tels que le code source, les d\u00e9pendances, les biblioth\u00e8ques, etc. Ces images sont stock\u00e9es dans un registre Docker (comme Docker Hub).</p>"},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#conteneurs-docker","title":"Conteneurs Docker","text":"<p>Les conteneurs Docker sont des instances en cours d'ex\u00e9cution des images Docker. Ils sont l\u00e9gers, isol\u00e9s les uns des autres et partagent le noyau du syst\u00e8me d'exploitation sous-jacent.</p>"},{"location":"1.%20Introduction/Installation-et-fonctionnement-docker/#volumes-docker","title":"Volumes Docker","text":"<p>La vue Volumes dans Docker Dashboard vous permet de cr\u00e9er et de supprimer facilement des volumes et de voir lesquels sont utilis\u00e9s. Vous pouvez \u00e9galement voir quel conteneur utilise un volume sp\u00e9cifique et explorer les fichiers et dossiers de vos volumes.</p> <p>G\u00e9rez vos volumes</p> <p>Utilisez le champ Rechercher pour rechercher un volume sp\u00e9cifique.</p> <p>Vous pouvez trier les volumes par :</p> <ul> <li>Nom</li> <li>Date cr\u00e9\u00e9e</li> <li>Taille</li> </ul> <p>Dans le menu Plus d'options \u00e0 droite de la barre de recherche, vous pouvez choisir les informations de volume \u00e0 afficher.</p> <p>Inspecter un volume</p> <p>Pour explorer les d\u00e9tails d'un volume sp\u00e9cifique, s\u00e9lectionnez un volume dans la liste. Cela ouvre la vue d\u00e9taill\u00e9e.</p> <ul> <li> <p>L' onglet En cours d'utilisation affiche le nom du conteneur \u00e0 l'aide du volume, le nom de l'image, le num\u00e9ro de port utilis\u00e9 par le conteneur et la cible. Une cible est un chemin \u00e0 l'int\u00e9rieur d'un conteneur qui donne acc\u00e8s aux fichiers du volume.</p> </li> <li> <p>L' onglet Donn\u00e9es affiche les fichiers et dossiers dans le volume et la taille du fichier. Pour enregistrer un fichier ou un dossier, survolez le fichier ou le dossier et s\u00e9lectionnez dans le menu Plus d'options.</p> </li> </ul> <p>Supprimer un volume</p> <p>La suppression d'un volume supprime le volume et toutes ses donn\u00e9es.</p> <p>Pour supprimer un volume, passez la souris sur le volume, puis s\u00e9lectionnez l' ic\u00f4ne Supprimer. Vous pouvez \u00e9galement s\u00e9lectionner le volume dans la liste, puis s\u00e9lectionner le bouton Supprimer.</p> <p>Plus d'informations sur : https://docs.docker.com</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/","title":"Working Directory, Stage, Repo, HEAD","text":"<p>Pour comprendre pleinement la dynamique de Git, il est essentiel de saisir comment le working directory, le stage, le repo et HEAD sont intrins\u00e8quement li\u00e9s. Imaginez-les comme les pi\u00e8ces interconnect\u00e9es d'une machine puissante de gestion de versions.</p> <pre><code>graph LR;\n    A[WORKING DIRECTORY] -- git add --&gt; B[STAGING AREA]\n    B -- git commit --&gt; C[REPOSITORY]\n    C -- git checkout --&gt; A\n    classDef yellow fill:#CDA000,stroke:#CDA000,strokeWidth:2px,color:#fff;\n    classDef orange fill:#F95124,stroke:#F95124,strokeWidth:2px,color:#fff;\n    classDef blue fill:#00909B,stroke:#00909B,strokeWidth:2px,color:#fff;\n    class A orange;\n    class B yellow;\n    class C blue;</code></pre>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#quest-ce-que-la-working-directory","title":"Qu'est-ce que la Working Directory ?","text":"<p>C'est la premi\u00e8re zone qu'on utilise, le dossier de travail. D\u00e8s qu\u2019on a initialis\u00e9 Git sur un projet, tout travail versionn\u00e9 (ajouts, suppressions, modifications) a lieu dans cette zone. Simplement c'est la zone de travail sur son ordinateur.</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#en-resume","title":"En r\u00e9sum\u00e9 ?","text":"<p>En r\u00e9sum\u00e9, le working directory est la copie des fichiers sur la branche active de votre projet GitHub o\u00f9 vous effectuez vos modifications avant de les enregistrer sous forme de commits et de les pousser vers le r\u00e9f\u00e9rentiel GitHub distant pour partager vos modifications avec d'autres collaborateurs.</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#quest-ce-que-le-stage","title":"Qu'est-ce que le Stage ?","text":"<p>Le stage est une zone d\u00e9di\u00e9e \u00e0 la pr\u00e9paration des commits : le stage. On peut la voir comme une zone tampon dans laquelle on va lister les modifications qu\u2019on souhaite mettre dans notre prochain commit (ajouts, suppressions, tout ou partie des modifications).</p> <p>Qui dit pr\u00e9paration au commit dit qu\u2019on peut ajouter ou retirer des \u00e9l\u00e9ments au stage avant de committer.</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#comment-ca-marche","title":"Comment \u00e7a marche ?","text":"<p>On retrouve donc des commandes \u00e0 cet effet :</p> <p>Pour enregistrer les manipulations qu\u2019on souhaite committer :</p> <pre><code>git add ...\ngit add ...\ngit stage\n</code></pre> <p>Pour enregistrer une suppression :</p> <pre><code>git rm ...\ngit rm ...\n</code></pre> <p>Pour retirer des \u00e9l\u00e9ments ajout\u00e9s au stage :</p> <pre><code>git restore --staged\n</code></pre> <p>Pour voir la diff\u00e9rence entre le working directory et le stage :</p> <pre><code>git diff\n</code></pre>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#quest-ce-que-le-repo","title":"Qu'est-ce que le Repo ?","text":"<p>Le repo est la copie du projet GitHub, un repo (ou d\u00e9p\u00f4t) Git est un emplacement o\u00f9 Git stocke l'historique des versions et les fichiers source d'un projet. On retrouve tous ces \u00e9l\u00e9ments dans le dossier <code>.git</code>. Le terme \"Repo\" est une abr\u00e9viation courante de \"repository\" en anglais, ce qui signifie en fran\u00e7ais \"d\u00e9p\u00f4t\" ou \"d\u00e9p\u00f4t de code\". C'est un \u00e9l\u00e9ment central de Git, car il permet de suivre l'\u00e9volution du code source, de collaborer avec d'autres d\u00e9veloppeurs, de g\u00e9rer les branches de d\u00e9veloppement, et bien plus encore.</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#comment-ca-marche_1","title":"Comment \u00e7a marche ?","text":"<p>Comment ajouter des \u00e9l\u00e9ments de votre zone de transit (stage) \u00e0 votre r\u00e9f\u00e9rentiel local (repo) ? La commande git <code>git commit</code> prend toutes les modifications dans la zone de transit (stage), les regroupe et les place dans votre r\u00e9f\u00e9rentiel local (repo). Un commit est simplement un point de contr\u00f4le indiquant \u00e0 git de suivre tous les changements survenus jusqu'\u00e0 pr\u00e9sent en utilisant notre dernier commit comme comparaison. Apr\u00e8s la validation, votre zone de transit sera vide.</p> <p>Comment pouvez-vous voir ce qui se trouve dans votre r\u00e9f\u00e9rentiel local (repo) ? Il existe quelques commandes que vous pouvez ex\u00e9cuter pour afficher diff\u00e9rentes choses.</p> <pre><code>git ls-tree --full-tree -r HEAD\n</code></pre> <p>Cette commande affiche tous les fichiers de votre d\u00e9p\u00f4t git qu'elle suit.</p> <pre><code>git log\n</code></pre> <p>Cette commande affiche un journal de tous les points de contr\u00f4le pr\u00e9c\u00e9dents dans mon r\u00e9f\u00e9rentiel. Si je souhaite voir plus d'informations sur un commit sp\u00e9cifique, j'ex\u00e9cute la commande <code>git show #commit#</code> pour voir ce qui a \u00e9t\u00e9 modifi\u00e9 \u00e0 ce point de contr\u00f4le sp\u00e9cifique.</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#quest-ce-que-le-head","title":"Qu'est-ce que le HEAD ?","text":"<p>On consid\u00e8re le plus souvent HEAD comme un pointeur sur le dernier commit de la branche courante. C'est g\u00e9n\u00e9ralement le cas, mais pas tout le temps.</p> <p>HEAD est bien un pointeur, une r\u00e9f\u00e9rence vers un emplacement donn\u00e9 de notre historique (un commit si tu pr\u00e9f\u00e8res). Il a deux fonctions principales :</p> <ul> <li>nous rep\u00e9rer dans notre historique;</li> <li>d\u00e9finir l'endroit depuis lequel nous produisons un commit.</li> </ul> <p>Il permet de nous indiquer quelle est la branche active, d\u00e9finissant ainsi l'\u00e9tat de notre espace de travail, le commit qui servira de parent \u00e0 notre prochain commit et la branche qui devra bouger.</p>"},{"location":"1.%20Introduction/expliquer-les-principes-de-working-directory-stage-repo-head/#comment-ca-marche_2","title":"Comment \u00e7a marche ?","text":"<p>HEAD est repr\u00e9sent\u00e9 par le fichier .git/HEAD. Si on regarde son contenu, on trouvera toujours une seule ligne dont le format sera le plus souvent celui-ci :</p> <pre><code>ref: refs/heads/nom-de-branche\n</code></pre> <p>En d'autres termes, il contient g\u00e9n\u00e9ralement une r\u00e9f\u00e9rence \u00e0 la branche courante. En fait, c\u2019est justement parce qu\u2019il contient la r\u00e9f\u00e9rence d\u2019une branche, que celle-ci est consid\u00e9r\u00e9e comme la branche courante / active.</p> <p>Tu peux observer son comportement si tu demandes \u00e0 Git de basculer sur une autre branche :</p> <pre><code>git switch autre-branche\n</code></pre> <p>Tu verras alors le fichier .git/HEAD pointer vers cette autre branche :</p> <pre><code>ref: refs/heads/autre-branche\n</code></pre> <p>Si on pousse un peu et qu\u2019on cr\u00e9e un commit depuis cet emplacement, on verra que cette r\u00e9f\u00e9rence n\u2019aura pas chang\u00e9, HEAD pointera toujours sur autre-branche. C\u2019est la valeur de cette \u00e9tiquette de branche qui aura boug\u00e9 (seulement parce qu\u2019elle \u00e9tait d\u00e9sign\u00e9e active par HEAD).</p> <p>Cette commande est utilis\u00e9e pour r\u00e9initialiser le Git Head au commit juste avant le pr\u00e9c\u00e9dent :</p> <pre><code>git reset HEAD~1\n</code></pre>"},{"location":"1.%20Introduction/git/","title":"Qu'est ce que GIT ?","text":"<p>Git est un syst\u00e8me de gestion de versions qui r\u00e9volutionne la collaboration et le suivi des modifications dans le d\u00e9veloppement de logiciels. Il permet aux \u00e9quipes de travailler de mani\u00e8re efficace, de suivre l'\u00e9volution de leur code source et de g\u00e9rer les diff\u00e9rentes versions d'un projet.</p> <p>Git offre un moyen puissant de contr\u00f4ler les modifications apport\u00e9es \u00e0 un ensemble de fichiers, de les documenter et de les partager avec d'autres collaborateurs. Que vous soyez un d\u00e9veloppeur de logiciels, un \u00e9crivain, un designer ou tout simplement quelqu'un qui souhaite garder une trace de ses cr\u00e9ations, Git peut vous aider \u00e0 organiser, suivre et collaborer sur vos projets de mani\u00e8re transparente.</p>"},{"location":"1.%20Introduction/git/#gestion-de-projet-collaboratif","title":"Gestion de projet collaboratif","text":"<p>Git est largement utilis\u00e9 dans l'industrie du d\u00e9veloppement logiciel pour g\u00e9rer le code source de projets de toutes tailles, du petit script personnel aux vastes applications d'entreprise. L'un de ses avantages majeurs r\u00e9side dans sa capacit\u00e9 \u00e0 permettre \u00e0 plusieurs personnes de travailler simultan\u00e9ment sur un m\u00eame projet sans conflits majeurs. Gr\u00e2ce \u00e0 la gestion de branches, chaque collaborateur peut travailler sur une version diff\u00e9rente du code sans perturber le travail des autres. Une fois les modifications termin\u00e9es, Git facilite la fusion (ou le \"merge\") de ces branches pour cr\u00e9er une version coh\u00e9rente et compl\u00e8te du projet.</p>"},{"location":"1.%20Introduction/git/#versioning-et-tracabilite-du-projet","title":"Versioning et tra\u00e7abilit\u00e9 du projet","text":"<p>De plus, Git offre un historique d\u00e9taill\u00e9 de toutes les modifications apport\u00e9es au code, ce qui permet de remonter dans le temps pour identifier les probl\u00e8mes, suivre l'\u00e9volution d'une fonctionnalit\u00e9 ou revenir \u00e0 une version ant\u00e9rieure du projet si n\u00e9cessaire.</p>"},{"location":"1.%20Introduction/git/#ecosysteme-et-partage-de-code","title":"Ecosyst\u00e8me et partage de code","text":"<p>Git permet de facilement partager le code du projet que ce soit en local ou sur un ordinateur, en r\u00e9seau local ou \u00e0 distance gr\u00e2ce \u00e0 des services d'h\u00e9bergement de code tels que GitHub, GitLab et Bitbucket. Ces plateformes permettent de partager facilement le code, de collaborer avec d'autres d\u00e9veloppeurs, de suivre les probl\u00e8mes et de g\u00e9rer les demandes de fusion (pull requests).</p> <p>Voir l'introduction de Github</p>"},{"location":"1.%20Introduction/github/","title":"Qu'est ce que Github ?","text":""},{"location":"1.%20Introduction/github/#introduction","title":"Introduction","text":"<p>GitHub est une plateforme de gestion de versions et de collaboration essentielle dans le domaine du d\u00e9veloppement. Elle fournit un ensemble complet d'outils et de fonctionnalit\u00e9s permettant aux d\u00e9veloppeurs et aux \u00e9quipes de travailler de mani\u00e8re efficace et collaborative sur des projets de toutes tailles.</p>"},{"location":"1.%20Introduction/github/#fonctionnalitees-globales","title":"Fonctionnalit\u00e9es globales","text":"<p>Voici une pr\u00e9sentation rapide de ses caract\u00e9ristiques et fonctionnalit\u00e9s cl\u00e9s :</p> <p>1) Gestion de versions : Garde une trace de toutes les modifications apport\u00e9es au code source d'un projet et permet de documenter qui a fait quelles modifications, quand elles ont \u00e9t\u00e9 apport\u00e9es, et quelles parties du code ont \u00e9t\u00e9 modifi\u00e9es.</p> <p>2) D\u00e9p\u00f4ts : Espace centralis\u00e9 o\u00f9 tous les fichiers et les informations li\u00e9es \u00e0 un projet sont stock\u00e9s.</p> <p>3) Collaboration : Permet de d\u00e9finir des autorisations pour contr\u00f4ler qui peut effectuer quelles actions (lecture, \u00e9criture, fusion de code, etc.).</p> <p>4) Branches : Copies du code source principal o\u00f9 les d\u00e9veloppeurs peuvent travailler sur des fonctionnalit\u00e9s ou des correctifs de mani\u00e8re isol\u00e9e, sans perturber la branche principale du projet. Une fois que les modifications sont termin\u00e9es et test\u00e9es, elles peuvent \u00eatre fusionn\u00e9es dans la branche principale.</p> <p>5) Pull Requests : Propositions de modification du code avec discussions.</p> <p>6) Suivi des probl\u00e8mes (issues): Tickets qui permettent de suivre les bugs, les am\u00e9liorations et les nouvelles fonctionnalit\u00e9s \u00e0 impl\u00e9menter. Les membres de l'\u00e9quipe peuvent les utiliser pour signaler des probl\u00e8mes, attribuer des t\u00e2ches et suivre leur r\u00e9solution.</p> <p>7) Int\u00e9gration continue : Automatisation des tests et du d\u00e9ploiement.</p> <p>8) Wikis : Espaces o\u00f9 les \u00e9quipes peuvent documenter leur projet, y compris les instructions d'installation, les guides de contribution et d'autres informations importantes.</p> <p>9)  S\u00e9curit\u00e9 : Analyse du code et gestion des vuln\u00e9rabilit\u00e9s.</p> <p>10) Communaut\u00e9 : Suivi d'autres utilisateurs, partage d'id\u00e9es et participation aux discussions.</p>"},{"location":"1.%20Introduction/github/#docummentation-github","title":"Docummentation GitHub","text":"<p>Acc\u00e8der \u00e0 la documentation officielle Github</p>"},{"location":"2.%20Notions%20de%20base/6-git-stash-et-git-stash-pop/","title":"La commande <code>git stash</code>","text":"<p>La commande <code>git stash</code> met temporairement de c\u00f4t\u00e9 les modifications que vous avez apport\u00e9es \u00e0 votre copie de travail afin que vous puissiez travailler sur autre chose, puis revenir et les r\u00e9appliquer plus tard.</p> <p>Le stockage est pratique si vous avez besoin de changer rapidement de contexte et de travailler sur autre chose, mais que vous \u00eates \u00e0 mi-chemin d'un changement de code et que vous n'\u00eates pas tout \u00e0 fait pr\u00eat \u00e0 vous engager.</p>"},{"location":"2.%20Notions%20de%20base/6-git-stash-et-git-stash-pop/#un-cas-dusage-serait-par-exemple","title":"Un cas d'usage serait par exemple","text":"<p>1) Vous travaillez sur la branche feature-branch et avez apport\u00e9 plusieurs modifications \u00e0 vos fichiers.</p> <p>2) Soudainement, un bug critique est signal\u00e9 sur la branche principale (\"main\") et vous devez imm\u00e9diatement corriger ce bug.</p> <p>3) Vous ne pouvez pas pousser vos modifications inachev\u00e9es de la branche feature-branch vers la branche principale car elles ne sont pas encore pr\u00eates.</p> <p>4) Utilisez <code>git stash</code> pour enregistrer temporairement vos modifications non valid\u00e9es sans les \"commit\". Cela vous permet de basculer rapidement vers la branche principale sans perdre votre travail en cours et sans faire de \"commit\".</p> <pre><code>git stash \"Travail en cours sur la fonctionnalit\u00e9\"\n</code></pre> <p>5) Passez \u00e0 la branche principale pour corriger le bug et effectuer une validation.</p> <pre><code>git checkout main\ngit commit -m \"Correction du bug critique\"\n</code></pre> <p>6) Une fois le bug corrig\u00e9 sur la branche principale, vous pouvez retourner \u00e0 votre branche feature-branch en utilisant git checkout.</p> <pre><code>git checkout feature-branch\n</code></pre> <p>7) Ensuite, vous pouvez r\u00e9cup\u00e9rer vos modifications pr\u00e9c\u00e9demment mises en veille en utilisant git stash pop.</p> <pre><code>git stash pop\n</code></pre> <p>Cela appliquera vos modifications pr\u00e9c\u00e9demment enregistr\u00e9es et les supprimera de la pile des mises en veille.</p> <p>8) Continuez \u00e0 travailler sur votre fonctionnalit\u00e9 en cours.</p> <p>L'utilisation de git stash dans ce sc\u00e9nario vous permet de passer rapidement d'une t\u00e2che \u00e0 une autre sans compromettre l'int\u00e9grit\u00e9 de votre code, en vous assurant que vos modifications en cours sont enregistr\u00e9es et r\u00e9cup\u00e9rables lorsque vous en avez besoin.</p>"},{"location":"2.%20Notions%20de%20base/6-git-stash-et-git-stash-pop/#exemple-de-conflit","title":"Exemple de conflit","text":"<p>Un conflit Git Stash survient lorsque vous appliquez une mise en veille pr\u00e9c\u00e9demment enregistr\u00e9e (stash) et que les modifications que vous avez enregistr\u00e9es entrent en conflit avec les modifications actuelles dans votre r\u00e9pertoire de travail. Voici un exemple simplifi\u00e9 pour illustrer un conflit Git Stash</p> <p>1) Vous \u00eates sur la branche feature-branch et avez apport\u00e9 des modifications au fichier \"mon_fichier.txt\".</p> <p>2) Vous d\u00e9cidez d'enregistrer temporairement ces modifications dans un stash.</p> <p>3) Ensuite, vous continuez \u00e0 travailler sur le fichier \"mon_fichier.txt\" et apportez davantage de modifications.</p> <p>4) \u00c0 un moment donn\u00e9, vous d\u00e9cidez de restaurer les modifications pr\u00e9c\u00e9demment mises en veille.</p> <p>\u00c0 ce stade, un conflit peut survenir si les modifications que vous avez enregistr\u00e9es dans le stash entrent en conflit avec les modifications actuelles sur le fichier \"mon_fichier.txt\".</p> <p>5) Git vous informera du conflit en affichant un message similaire \u00e0 celui-ci :</p> <pre><code>Auto-merging mon_fichier.txt\nCONFLICT (content): Merge conflict in mon_fichier.txt\n</code></pre> <p>6) Vous devrez ouvrir le fichier \"mon_fichier.txt\" dans un \u00e9diteur de texte et r\u00e9soudre manuellement le conflit. Le fichier aura des marqueurs sp\u00e9ciaux pour indiquer o\u00f9 se trouvent les conflits, par exemple :</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nModifications actuelles\n=======\nModifications du stash\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; Stashed changes\n</code></pre> <p>Vous devrez d\u00e9cider quelles modifications garder, supprimer les marqueurs de conflit et enregistrer le fichier.</p>"},{"location":"2.%20Notions%20de%20base/6-git-stash-et-git-stash-pop/#mettre-de-cote-votre-travail","title":"Mettre de c\u00f4t\u00e9 votre travail","text":"<p>La commande <code>git stash</code> prend vos modifications non valid\u00e9es (qui ne sont pas commit), les enregistre pour une utilisation ult\u00e9rieure, puis les annule \u00e0 partir de votre copie de travail.</p> <p>Par exemple:</p> <pre><code>$ git status\nOn branch main\nChanges to be committed:\n\n    new file:   style.css\n\nChanges not staged for commit:\n\n    modified:   index.html\n\n$ git stash\nSaved working directory and index state WIP on main: 5002d47 our new homepage\nHEAD is now at 5002d47 our new homepage\n\n$ git status\nOn branch main\nnothing to commit, working tree clean\n</code></pre> <p>Ici <code>git stash</code> vient de sauvegarder les modifications dans dans le \"stash\" de votre r\u00e9f\u00e9rentiel Git, le \"stash\" ne sont pas transf\u00e9r\u00e9 sur le d\u00e9pot distant.</p> <p>\u00c0 ce stade, vous \u00eates libre d'apporter des modifications, de cr\u00e9er de nouveaux commits, de changer de branche et d'effectuer toute autre op\u00e9ration Git ; puis revenez et r\u00e9appliquez votre code en cache lorsque vous \u00eates pr\u00eat.</p>"},{"location":"2.%20Notions%20de%20base/6-git-stash-et-git-stash-pop/#reappliquer-vos-modifications","title":"R\u00e9appliquer vos modifications","text":"<p>Vous pouvez r\u00e9appliquer les modifications stocker dans le \"stash\" avec <code>git stash pop</code> :</p> <pre><code>$ git status\nOn branch main\nnothing to commit, working tree clean\n$ git stash pop\nOn branch main\nChanges to be committed:\n\n    new file:   style.css\n\nChanges not staged for commit:\n\n    modified:   index.html\n\nDropped refs/stash@{0} (32b3aa1d185dfe6d57b3c3cc3b32cbf3e380cc6a)\n</code></pre> <p>Cela r\u00e9affecte les modifications \u00e0 l'espace de travail, et vide le \"stash\" du r\u00e9f\u00e9rentiel Git.</p> <p>Faire un <code>git stash</code> va poser un fichier de modification sur une pile de modifications, la commande <code>git stash pop</code> renvera la derni\u00e8re modification enregistr\u00e9e par <code>git stash</code>.</p>"},{"location":"2.%20Notions%20de%20base/Gestion_Creation_Branche/","title":"Cr\u00e9er et g\u00e9rer les branches","text":"<p>Git permet la cr\u00e9ation de branches afin de mieux r\u00e9partir le travail et \u00e9viter les erreurs sur la version de production</p>"},{"location":"2.%20Notions%20de%20base/Gestion_Creation_Branche/#creer-des-branches","title":"Cr\u00e9er des branches","text":"<p>Il existe plusieurs fa\u00e7ons de cr\u00e9er une branche avec Git, la plus commune \u00e9tant d'utiliser la commande suivante : <pre><code>git checkout -b nom_de_notre_nouvelle_branche\n</code></pre></p> <p>La commande <code>-b</code> sert \u00e0 pr\u00e9ciser la cr\u00e9ation d'une nouvelle branche.</p> <p>Exemple</p> <pre><code>git checkout -b feature main\n</code></pre> <p>Cette commande va cr\u00e9er et diriger directement sur la nouvelle branche. Si l'on ne souhaite pas aller directement sur la branche, alors la commande suivante convient :  </p> <pre><code>git branch nom_de_la_branche\n</code></pre> <p>Exemple</p> <pre><code>git branch feature\n</code></pre> <p>Si l'on veut se diriger vers cette branche il faut de nouveau utiliser la commande checkout : </p> <pre><code>git checkout nom_de_la_branche \n</code></pre> <p>Vous \u00eates perdu ?</p> <p>Pour visualiser toutes les branches, utilisez la commande <code>git branch -a</code>.</p>"},{"location":"2.%20Notions%20de%20base/Gestion_Creation_Branche/#gestion-des-branches","title":"Gestion des branches","text":"<p>Pour supprimer une branche obsel\u00e8te il suffit de mettre -d. (pensez \u00e0 merge la branche avant de la supprimer, sinon une erreur apparaitra !).</p> <pre><code>$ git branch -d branche_a_suppr\n</code></pre> <p>Attention !</p> <p>Avant de supprimer une branche, pensez \u00e0 la merge.</p> <p>Si vous voulez supprimer une branche sans merge, utilisez la commande <code>$ git branch -D branche_a_suppr</code>.</p>"},{"location":"2.%20Notions%20de%20base/Gestion_Creation_Branche/#situer-sa-branche","title":"Situer sa branche","text":"<p>Pour savoir dans quelle branche vous vous trouvez : </p> <pre><code>git branch\n</code></pre> <p>La branche avec l'\u00e9toile est votre branche actuelle.</p> <p>Info</p> <ul> <li> <p>Vous pouvez ajouter -v pour voir les derniers commit sur chaque branches :  <pre><code>git branch -v\n</code></pre></p> </li> <li> <p>Pour voir les branches \"merged\"/\"no-merged\" :  <pre><code>git branch --merged\n</code></pre> OU <pre><code>git branch --no-merged\n</code></pre></p> </li> </ul>"},{"location":"2.%20Notions%20de%20base/Gestion_Creation_Branche/#renommer-une-branche","title":"Renommer une branche","text":"<p>Renommer localement :  <pre><code>$ git branch --move mauvais-nom-de-branche nouveau-nom-de-branche\n</code></pre></p> <p>Pour apporter la modification au serveur distant :  <pre><code>$ git push --set-upstream origin nom-de-branche-corrig\u00e9\n</code></pre></p> <p>Pour tout voir <pre><code>git branch -a\n</code></pre></p> <p>Vous avez dor\u00e9navant toutes les cl\u00e9s en main pour cr\u00e9er supprimer et g\u00e9rer les branches !</p>"},{"location":"2.%20Notions%20de%20base/Remote_repositories/","title":"Les remote repositories","text":"<p>Git remote est une r\u00e9f\u00e9rence \u00e0 un d\u00e9p\u00f4t distant, plus pr\u00e9cis\u00e9ment un emplacement o\u00f9 votre projet git est enregistr\u00e9 \u00e0 distance. Cela permet une collaboration et une synchronisation entre plusieurs d\u00e9veloppeurs sur un m\u00eame projet.</p> <p>Ils peuvent cloner le code pour le modifier en local, r\u00e9cup\u00e9rer les modifications faites dans le d\u00e9p\u00f4t distant fait apr\u00e8s le clonage local. Et pour finir se synchroniser avec les autres en poussant les modifications faites en local dans le d\u00e9p\u00f4t distant.</p>"},{"location":"2.%20Notions%20de%20base/Remote_repositories/#commandes-de-bases","title":"Commandes de bases","text":"<p>Lors de l'utilisation de git repositories il y a deux possibilit\u00e9 :</p> <ol> <li> <p>Vous avez d\u00e9j\u00e0 un d\u00e9p\u00f4t local et voulez ajouter un d\u00e9p\u00f4t distant :</p> <p>Si vous avez assign\u00e9 votre cl\u00e9 SSH \u00e0 votre compte git, vous pouvez importer et exporter des branches ainsi que vos modifications comme bon vous semble.</p> <p>Pour ajouter une remote repository vous devez \u00e9xecuter cette commande :</p> <pre><code>git remote add origin &lt;url ssh&gt;\n</code></pre> </li> <li> <p>Vous voulez copier le contenu d'un d\u00e9p\u00f4t distant (et n'avez pas de code fait en local pour l'instant) :     <code>git clone</code> cr\u00e9er une copie locale d'un d\u00e9p\u00f4t distant (repository) sur votre propre appareil. Elle t\u00e9l\u00e9charge tous les fichiers et l'historique de version du d\u00e9p\u00f4t distant, permettant un travail avec les fichiers localement. </p> <p>Quand vous faite un <code>git clone</code> le d\u00e9p\u00f4t local aura comme d\u00e9p\u00f4t distant celui qu'il a clon\u00e9.</p> </li> </ol>"},{"location":"2.%20Notions%20de%20base/Remote_repositories/#push","title":"Push","text":"<p>Pour pousser (push) votre branche vers votre remote repository vous devrez ex\u00e9cuter : <pre><code>git push origin &lt;nom-branche&gt;\n</code></pre></p> <p>Attention</p> <p>Dans le cas ou vous devez mettre une branche qui n'existe pas encore dans le projet vous devrez utiliser cette commande :</p> <pre><code>git push -u origin &lt;nom-branche&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/Remote_repositories/#pull","title":"Pull","text":"<p>Si des modifications on \u00e9t\u00e9 faites sur le projet hors de votre appareil il vous faudra faire un\u00a0pull\u00a0: <pre><code>git pull origin &lt;nom-branche&gt;\n</code></pre></p>"},{"location":"2.%20Notions%20de%20base/SSH/","title":"SSH","text":"<p>SSH (Secure Socket Shell) est un protocole de s\u00e9curit\u00e9 pour les communications r\u00e9seau, principalement utilis\u00e9 pour l'acc\u00e8s s\u00e9curis\u00e9 \u00e0 distance aux ordinateurs et le transfert de fichiers. C'est SSH qui vous permet de transf\u00e9rer vos push et pull en toute s\u00e9curit\u00e9.</p>"},{"location":"2.%20Notions%20de%20base/SSH/#setup","title":"Setup","text":"<p>Pour \u00eatre capable d'int\u00e9ragir avec vos projets GitHub/GitLab, il faut donc une cl\u00e9 SSH.</p> <p>Afin de la g\u00e9n\u00e9rer, il faut executer cette commande dans le CMD :</p> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>Warning</p> <p>Faites bien attention \u00e0 correctement choisir et se rappeler les donn\u00e9es \u00e0 rentrer lors de la cr\u00e9ation de la cl\u00e9, notamment la 'Passphrase' qui vous sera demand\u00e9 \u00e0 l'utilisation de la cl\u00e9.</p> <p>Tip</p> <p>Vous pouvez laissez la passphrase vide, ce qui est pratique pour \u00e9viter de la renseigner \u00e0 chaque utilisation</p> <p>Info</p> <p>Si vous utilis\u00e9 un syst\u00e8m d'exploitation ancien que que l'algorithme EdDSA ne fonctionne pas, utilis\u00e9 cette commande : <code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"</code></p> <p>Cela vous g\u00e9n\u00e8rera une cl\u00e9 priv\u00e9e et une cl\u00e9 publique, qui seront situ\u00e9 \u00e0 \"C:/Users/Username/.ssh\", la cl\u00e9 publique aura le m\u00eame nom que la priv\u00e9e a l'exeptions qu'elle se termine par \".pub\".</p> <p>Ensuite il vous faudra mettre votre cl\u00e9 publique sur votre compte GitHub/GitLab, afin que vos pull et push soient accept\u00e9 sur votre appareil.</p> <p>Pour cela, vous aurez \u00e0 aller dans les param\u00e8tres de votre compte : Mon compte Github, puis dans le menu \u00e0 gauche, allez dans SSh and GPS keys. Ensuite, ajoutez votre cl\u00e9 via le bouton New SSH key.</p>"},{"location":"2.%20Notions%20de%20base/ajout-image/","title":"Ajout d'images dans la documentation","text":"<p>Dans cette documentation, vous apprendrez comment ajouter des images facilement et simplement via VS Code.</p>"},{"location":"2.%20Notions%20de%20base/ajout-image/#copier-coller","title":"Copier / Coller","text":"<p>Pour copier/coller une image, il vous suffit de copier une image Ctrl+C ou Cmd+C et de coller l'image Ctrl+V ou Cmd+V sur le document VS Code.</p> <p>Cela aura pour cons\u00e9quence d'ins\u00e9rer une ligne de ce genre : <code>![Alt text](image.png)</code></p>"},{"location":"2.%20Notions%20de%20base/ajout-image/#parametres-de-limage","title":"Param\u00e8tres de l'image","text":""},{"location":"2.%20Notions%20de%20base/ajout-image/#le-texte-alternatif","title":"Le texte alternatif","text":"<p>Il est possible de g\u00e9rer le texte alternatif <code>[Alt text]</code> de l'image.</p> <p>Info</p> <p>Pour plus d'informations \u00e0 propos du Texte alternatif.</p> <p>Exemple</p> <p><code>![Un \u00e9l\u00e9phant port\u00e9 par une mongolfi\u00e8re](elephant_mongolfiere.jpg)</code></p> <p></p>"},{"location":"2.%20Notions%20de%20base/ajout-image/#le-lien-de-limage","title":"Le lien de l'image","text":"<p>Il est possible d'utiliser des chemins absoluts/relatifs mais aussi h\u00e9berg\u00e9s sur le Web.</p> <p>Info</p> <p>Pour plus d'informations \u00e0 propos des URL</p> <p>Exemple</p> <p><code>![Un \u00e9l\u00e9phant port\u00e9 par une mongolfi\u00e8re](https://www.referenseo.com/wp-content/uploads/2019/03/image-attractive-960x540.jpg)</code></p> <p></p>"},{"location":"2.%20Notions%20de%20base/ajout-image/#emplacement-de-limage-dans-le-dossier-de-travail","title":"Emplacement de l'image dans le dossier de travail","text":"<p>Lors du copier/coller, l'image apparait par d\u00e9faut dans le dossier de travail. Cependant, il est possible de d\u00e9cider du chemin par d\u00e9faut.</p> <p>Dans l'exemple suivant, nous d\u00e9finirons le chemin du dossier dans lesquelles les images seront enregistr\u00e9es.</p> <p>\u00c9tape 1 : Aller dans les param\u00e8tres de VS Code Ctrl++</p> <p></p> <p>\u00c9tape 2 : Rechercher le terme <code>Markdown</code></p> <p></p> <p>\u00c9tape 3 : Cliquer sur le bouton <code>Add Item</code></p> <p></p> <p>\u00c9tape 4 : Dans le champs <code>Item</code>, entrer le chemin de votre dossier. Ici on choisit n'importe quel dossier pour que cela fonctionne n'importe o\u00f9. Dans le champs <code>Value</code>, entrer le nom du dossier o\u00f9 les images seront enregistr\u00e9es. Le dossier sera cr\u00e9\u00e9 automatiquement s'il n'existe pas d\u00e9j\u00e0, ici on nomme notre dossier <code>assets</code>.</p> <p></p>"},{"location":"2.%20Notions%20de%20base/comment-et-pourquoi-amender-un-commit/","title":"Comment et pourquoi amender un commit ?","text":""},{"location":"2.%20Notions%20de%20base/comment-et-pourquoi-amender-un-commit/#pourquoi-amender-un-commit","title":"Pourquoi amender un commit ?","text":"<p>Amender un commit est utile pour corriger ses erreurs. Il permet de supprimer le dernier commit et de le remplacer par un nouveau. Tr\u00e9s utile dans le cas o\u00f9 vous avez oubli\u00e9 un fichier ou que le message du commit ne repecte pas la convention de nommage.</p>"},{"location":"2.%20Notions%20de%20base/comment-et-pourquoi-amender-un-commit/#comment-amender-un-commit","title":"Comment amender un commit ?","text":"<p>La commande est simple :</p> <pre><code>git commit --amend\n</code></pre> <p>Voyons les cas de figure classiques :</p> <p>Ajout d'un fichier oubli\u00e9</p> <p>Le cas le plus courant est l'oubli d'un fichier, tr\u00e8s souvent non suivi et non ajout\u00e9 \u00e0 la vol\u00e9e.</p> <p>La proc\u00e9dure est alors la suivante :</p> <p>on ajoute le ou les fichiers au stage  <pre><code>git add les-chemins \n</code></pre> on annule et remplace le commit  <pre><code>git commit --amend\n</code></pre></p> <p>Mise a jour du message</p> <p>Qui n'a jamais fait de faute de frappe ni oubli\u00e9 une r\u00e9f\u00e9rence importante comme un num\u00e9ro de ticket dans un message de commit ? </p> <p>Dans cette situation on va devoir :</p> <ul> <li>v\u00e9rifier que notre stage est vide</li> <li>lancer la commande  <pre><code>git commit --amend -m 'Nouveau message'\n</code></pre></li> </ul> <p>Un amendement r\u00e9\u00e9crit votre commit</p> <p>Si vous essayez de push, vous aurez un message d'erreur car votre branche est d\u00e9synchronis\u00e9e de la branche distante. Utilisez <code>git push -f</code> pour forcer.</p>"},{"location":"2.%20Notions%20de%20base/fichier-gitignore/","title":"\u00c0 quoi sert le fichier <code>.gitignore</code> ?","text":"<p><code>.gitignore</code> est un fichier texte permettant lors des commit d'ignorer les fichiers et r\u00e9pertoires mentionner dans celui-ci.</p>"},{"location":"2.%20Notions%20de%20base/fichier-gitignore/#comment-creer-son-fichier-gitignore","title":"Comment cr\u00e9er  son fichier <code>.gitignore</code> ?","text":"<p>Pour cr\u00e9er un fichier <code>.gitignore</code> local, cr\u00e9ez un fichier texte et nommez-le <code>.gitignore</code> . Chaque nouvelle ligne devrait lister un fichier additionnel ou un r\u00e9pertoire que vous voulez que Git ignore.</p> <p>Les entr\u00e9es dans ce fichier peuvent aussi suivre un mod\u00e8le de correspondance (matching pattern).</p> <p><code>*</code> est utilis\u00e9 comme un caract\u00e8re de remplacement de correspondance (wildcard match)</p> <p><code>/</code> est utilis\u00e9 pour ignorer les chemins d'acc\u00e8s relatifs au fichier <code>.gitignore</code></p> <p><code>#</code> est utilis\u00e9 pour ajouter des commentaires \u00e0 un fichier <code>.gitignore</code></p>"},{"location":"2.%20Notions%20de%20base/fichier-gitignore/#voici-un-exemple-de-ce-a-quoi-le-fichier-gitignore-pourrait-ressembler","title":"Voici un exemple de ce \u00e0 quoi le fichier .gitignore pourrait ressembler :","text":"<p>Ignorer les fichiers syst\u00e8mes Mac</p> <pre><code>.DS_store\n</code></pre> <p>Ignorer le r\u00e9pertoire node_modules</p> <pre><code>node_modules\n</code></pre> <p>Ignorer tous les fichiers texte</p> <pre><code>*.txt\n</code></pre> <p>Ignorer les fichiers li\u00e9s aux cl\u00e9s d'API</p> <pre><code>.env\n</code></pre> <p>Ignorer les fichiers de configuration SASS</p> <pre><code>.sass-cache\n</code></pre>"},{"location":"2.%20Notions%20de%20base/fichier-gitignore/#configuration-globale","title":"Configuration globale","text":"<p>Pour ignorer les fichiers syst\u00e8mes, qui sont diff\u00e9rents pour tout le monde, pr\u00e9f\u00e9rez utiliser la configuration globale afin de ne pas avoir \u00e0 les d\u00e9clarer dans le <code>.gitignore</code> de tous vos projets.</p> <pre><code>echo .DS_Store &gt;&gt; ~/.gitignore_global\n</code></pre> <p>Le <code>.gitignore_global</code> s'applique sur votre machine \u00e0 tous les r\u00e9pertoires Git.</p>"},{"location":"2.%20Notions%20de%20base/fichier-gitignore/#pour-en-savoir-plus","title":"Pour en savoir plus","text":"<p>Voir la documentation sur git-scm.com</p>"},{"location":"2.%20Notions%20de%20base/git-log-graph/","title":"Utilisation de Git Log / Git Graph","text":""},{"location":"2.%20Notions%20de%20base/git-log-graph/#git-log","title":"Git Log","text":"<p>Lors de projet Git, la commande <code>git commit</code>, qui permet de cr\u00e9er des instantan\u00e9s du projet et d'enregistrer les modifications du projet, est tr\u00e8s souvent utilis\u00e9. Tous les <code>commit</code> sont enregistrer dans un historique qui peut vite devenir compliqu\u00e9 \u00e0 explorer. C'est pourquoi il existe une commande <code>git log</code> qui permet d'afficher les commits, de les filtrer et m\u00eame de rechercher une modification pr\u00e9cise.</p> <p>Pour obtenir un rendu graphique des commits de la branche, utilisez la commande ci-dessous:  <pre><code>git log --graph --oneline\n</code></pre></p> <p></p> <p>Pour obtenir un rendu graphique de toutes les branches du projet, utilisez la commande ci-dessous:  <pre><code>git log --graph --oneline --all\n</code></pre></p>"},{"location":"2.%20Notions%20de%20base/git-log-graph/#syntaxe-de-git-log","title":"Syntaxe de Git Log","text":"<code>git log</code> La commande par d\u00e9faut liste tous les commits dans l\u2019ordre inverse <code>git log --graph --oneline</code> Liste les modifications sous forme graphique de la branche <code>git log --graph --oneline --decorate --all</code> Liste les modifications sous forme graphique de toutes les branches du repository <code>git log -p</code> Affiche le contexte des modifications <code>git log --stat</code> Affiche les statistiques de modifications avec une liste claire <code>git log --oneline</code> Regroupe chaque commit sur une ligne pour un meilleur aper\u00e7u <code>git log -n &lt;nombre&gt;</code> Limite le nombre de commits affich\u00e9s <code>git log --author=\"nom de l\u2019auteur\"</code> Affiche uniquement les commits d\u2019un auteur donn\u00e9 <code>git log --grep=\"message\"</code> Filtre les commits en fonction de leur explication <code>git log &lt;since&gt;..&lt;until&gt;</code> Affiche uniquement les commits sur une p\u00e9riode donn\u00e9e <code>git log &lt;fichier&gt;</code> Affiche uniquement les commits qui contiennent un fichier sp\u00e9cifique <code>git log --pretty</code> Modifie le format de la sortie selon ses propres sp\u00e9cifications <p>Pour plus de d\u00e9tails sur les commandes <code>git log</code>, lancez la commande <code>git log --help</code>. Cette commande vous ouvrira une page navigateur qui r\u00e9pertorie toutes les commandes git log avec tous les filtres possibles.</p>"},{"location":"2.%20Notions%20de%20base/git-log-graph/#quest-ce-quun-git-graph","title":"Qu'est ce qu'un Git Graph ?","text":"<p>Un Git Graph est une repr\u00e9sentation/revisualisation des commits et des \u00e9v\u00e8nements sur les diff\u00e9rentes branches du projet.</p> <p></p> <p>L\u00e9gende</p> <ul> <li>Chaque trait de couleur repr\u00e9sente une branche du projet, le nom de la branche est affich\u00e9</li> <li>Chaque point repr\u00e9sente un commit de la branche</li> </ul>"},{"location":"2.%20Notions%20de%20base/git-log-graph/#comment-avoir-acces-au-git-graph-du-projet","title":"Comment avoir acc\u00e8s au Git Graph du projet ?","text":""},{"location":"2.%20Notions%20de%20base/git-log-graph/#github","title":"Github","text":"<p>Pour avoir acc\u00e8s au Git Graph du projet, il suffit d'aller sur l'onglet <code>Insight</code> de la barre de navigation de Github.</p> <p></p> <p>Ensuite, choisir <code>Network</code> et le graph s'affichera.</p> <p></p>"},{"location":"2.%20Notions%20de%20base/git-log-graph/#gitlab","title":"Gitlab","text":"<p>Pour GitLab, il faut aller dans l'onglet <code>Code</code> puis choisir <code>Repository graph</code>. M\u00eame fonctionnement que pour Github, chaque couleur d\u00e9fini une branche du projet et chaque point un commit.</p> <p></p>"},{"location":"2.%20Notions%20de%20base/git-log-graph/#une-extension-vs-code","title":"Une extension VS Code","text":"<p>Il existe pour VS Code une extension p\u00earmettant de pr\u00e9visualiser les Git Graph directement sur le projet en local, Git Graph.</p> <p></p> <p>Une fois installer, il suffit de clicker sur le bouton <code>Git Graph</code> en bas de page.</p> <p></p>"},{"location":"2.%20Notions%20de%20base/git-reset/","title":"Git reset","text":""},{"location":"2.%20Notions%20de%20base/git-reset/#concept","title":"Concept","text":"<p>La commande <code>git reset</code> joue un r\u00f4le crucial dans la gestion des branches et de l'historique d'un projet Git. Son utilit\u00e9 r\u00e9side dans sa capacit\u00e9 \u00e0 d\u00e9placer la branche courante vers un commit sp\u00e9cifique, engendrant ainsi des modifications potentielles dans l'historique du projet et dans le r\u00e9pertoire de travail.</p> <p>Note</p> <p>Pour sp\u00e9cifier le commit vers lequel la branche doit se d\u00e9placer, vous pouvez utiliser le nom d'une branche ou un identifiant de commit. <pre><code>git reset &lt;nom_de_la_branche&gt;\ngit reset &lt;identifiant_de_commit&gt;\n</code></pre></p>"},{"location":"2.%20Notions%20de%20base/git-reset/#mixed-reset-par-defaut","title":"Mixed Reset (par d\u00e9faut)","text":"<p>Le mixed reset, qui est la configuration par d\u00e9faut, d\u00e9place la branche actuelle vers un commit sp\u00e9cifique tout en annulant le suivi (unstaging) des fichiers. Ainsi, les modifications effectu\u00e9es restent dans le r\u00e9pertoire de travail mais ne sont pas en cours de staging.</p> <p>Example</p> <pre><code># D\u00e9place la branche actuelle vers le commit sp\u00e9cifique\n# et annule le suivi (unstaging) des fichiers\ngit reset HEAD^\n</code></pre>"},{"location":"2.%20Notions%20de%20base/git-reset/#soft-reset","title":"Soft Reset","text":"<p>Le soft reset effectue un d\u00e9placement de la branche actuelle vers un commit sp\u00e9cifique, tout en pr\u00e9servant l'\u00e9tat actuel des fichiers dans le r\u00e9pertoire de travail. Cela signifie que les modifications ne sont pas perdues, et les fichiers restent inchang\u00e9s apr\u00e8s le reset.</p> <p>Example</p> <pre><code># D\u00e9place la branche actuelle vers le commit sp\u00e9cifique\n# en pr\u00e9servant les modifications dans le r\u00e9pertoire de travail\ngit reset --soft HEAD~2\n</code></pre>"},{"location":"2.%20Notions%20de%20base/git-reset/#hard-reset","title":"Hard Reset","text":"<p>Le hard reset constitue la forme la plus radicale de reset. Il d\u00e9place la branche actuelle vers un commit sp\u00e9cifique et supprime toutes les modifications non commit\u00e9es dans le r\u00e9pertoire de travail. Cette action ram\u00e8ne l'\u00e9tat du projet \u00e0 celui du commit sp\u00e9cifique, en annulant toutes les modifications non enregistr\u00e9es.</p> <p>Example</p> <pre><code># D\u00e9place la branche actuelle vers le commit sp\u00e9cifique\n# et supprime toutes les modifications non commit\u00e9es dans\n# le r\u00e9pertoire de travail\ngit reset --hard abc123\n</code></pre> <p>Warning</p> <p><code>git reset</code> est une option potentiellement risqu\u00e9e. Utiliser cette commande pr\u00e9sente un risque r\u00e9el de perte de travail, car bien qu'il ne supprime jamais un commit, il peut rendre des commits \"orphelins\", c'est-a-dire sans acc\u00e8s direct depuis une r\u00e9f\u00e9rence. Des pr\u00e9cautions doivent \u00eatre prises lors de l'utilisation de cet outil, car c'est l'une des seules commandes Git susceptibles de perdre votre travail.</p>"},{"location":"2.%20Notions%20de%20base/listingcommand/","title":"Commandes GIT - Base","text":""},{"location":"2.%20Notions%20de%20base/listingcommand/#git-config","title":"<code>git config</code>","text":"<p>C'est la commande qu'on utilise juste apr\u00e8s l'installation de GIT, comme son nom l'indique elle permet de configurer votre nom et votre adresse mail. C'est ces informations qui serton utilis\u00e9es \u00e0 chaque commit :</p> <pre><code> git config --global user.name \" Votre nom \"\n git config --global user.email \"Votre adresse email\"\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-init","title":"<code>git init</code>","text":"<p>Comme son nom l'indique, cette commande permet d'initialiser un nouveau d\u00e9pot Git et donc de permettre par la suite d'utiliser les commandes git dans votre r\u00e9pertoire. En effet avant git init, la plupart des commandes git ne sont pas accessibles.</p> <pre><code> git init\n</code></pre> <p>En cr\u00e9ant une app React ou en faisant un par exemple, le git init est fait automatiquement</p>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-clone","title":"<code>git clone</code>","text":"<p>La commande <code>git clone</code> permet de cr\u00e9er une copie d'un projet Github dans votre \u00e9diteur de code. Par exemple, vous arrivez dans une \u00e9quipe dont le projet est d\u00e9j\u00e0 commenc\u00e9, vous ferez le choix d'un <code>git clone</code>. Le <code>git clone</code> execute en meme temps un <code>git init</code>.</p> <pre><code>git clone https://github.com/ub-mmi-but/git-101.git\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-status","title":"<code>git status</code>","text":"<p>La commande <code>git status</code> affiche l'\u00e9tat du r\u00e9pertoire de travail et de la zone de staging. Elle vous permet de voir les changements qui ont \u00e9t\u00e9 stag\u00e9s, ceux qui ne l'ont pas \u00e9t\u00e9, ainsi que les fichiers qui sont track\u00e9s par Git.</p> <pre><code>git status\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-add","title":"<code>git add</code>","text":"<p>La commande <code>git add</code> permet de stager les fichiers qui ont chang\u00e9s pour qu'ils soient pris en compte dans le futur <code>git commit</code></p> <p><pre><code>git add /chemin/vers/le/fichier\n</code></pre> Ajouter tout les fichiers qui ont chang\u00e9s : <pre><code>git add -A\n</code></pre></p>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-commit","title":"<code>git commit</code>","text":"<p>La commande git commit permet d'enregistrer les modifications. Un commit est une \u00e9tape dans l'historique de votre projet. Chaque commit doit \u00eatre accompagn\u00e9 d'un message (Ajouter <code>-m \"message du commit\"</code>) pour connaitre de quel enregistrement il s'agit .</p> <pre><code>git commit -m \"message du commit\"\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-push","title":"<code>git push</code>","text":"<p>La commande <code>git push</code> ajoute les contenus d'un d\u00e9p\u00f4t local vers un d\u00e9p\u00f4t central. Ajouter l'origine avec <code>origin &lt;nom_de_la_branche&gt;</code></p> <p>Bien faire cette commande sur sa branche car elle \u00e9crase les autres modifications</p> <pre><code>git push origin &lt;nom_branche&gt;\"\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-branch","title":"<code>git branch</code>","text":"<p>La commande <code>git branch</code> permet lister le nom des branches dans un r\u00e9pertoire. Ajouter un nom de branche \u00e0 la fin de la commande permet d'ajouter une nouvelle branche.</p> <pre><code>git branch\ngit branch &lt;nom_branche&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-checkout","title":"<code>git checkout</code>","text":"<p>La commande <code>git checkout</code> permet la plupart du temps de changer de branche. Ajouter -b devant le nom de la branche permet de la cr\u00e9er en basculant sur elle en m\u00eame temps. Apr\u00e8s la commande, on peut aussi sp\u00e9cifier le hash d'un commit pour l'examiner sans cr\u00e9er une nouvelle branche.</p> <pre><code>git checkout &lt;nom_branche&gt;\ngit chechout -b &lt;nom_branche&gt;\ngit checkout &lt;hash_commit&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-remote","title":"<code>git remote</code>","text":"<p>La commande <code>git remote</code> permet de g\u00e9rer les d\u00e9p\u00f4ts distants associ\u00e9s \u00e0 votre projet Git. Elle affiche les noms des d\u00e9p\u00f4ts distants configur\u00e9s pour votre projet.</p> <pre><code>git remote\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-fetch","title":"<code>git fetch</code>","text":"<p>La commande <code>git fetch</code> permet de r\u00e9cup\u00e9rer les derni\u00e8res modifications depuis un d\u00e9p\u00f4t distant sans les fusionner avec votre branche locale. Elle met \u00e0 jour les r\u00e9f\u00e9rences distantes et les branches distantes correspondantes sans modifier votre travail local.</p> <pre><code>git fetch &lt;d\u00e9p\u00f4t distant&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-pull","title":"<code>git pull</code>","text":"<p>La commande <code>git pull</code> r\u00e9cup\u00e8re les modifications depuis un d\u00e9p\u00f4t distant et fusionne les modifications avec votre branche locale. Elle \u00e9quivaut \u00e0 ex\u00e9cuter <code>git fetch</code> suivi de <code>git merge</code> pour fusionner les modifications.</p> <pre><code>git pull &lt;d\u00e9p\u00f4t distant&gt; &lt;branche distante&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-stash","title":"<code>git stash</code>","text":"<p>La commande <code>git stash</code> permet de mettre de c\u00f4t\u00e9 les modifications non valid\u00e9es dans une pile temporaire. Cela vous permet de basculer entre les branches ou de r\u00e9cup\u00e9rer des modifications ult\u00e9rieurement.</p> <pre><code>git statsh\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-log","title":"<code>git log</code>","text":"<p>La commande <code>git log</code> affiche l'historique des commits effectu\u00e9s dans votre projet. Elle affiche les informations telles que l'auteur du commit, la date, l'heure et le message du commit.</p> <pre><code>git log\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-shortlog","title":"<code>git shortlog</code>","text":"<p>La commande <code>git shortlog</code> affiche un r\u00e9sum\u00e9 des commits effectu\u00e9s par chaque auteur du projet. Elle regroupe les commits par auteur et affiche le nombre de commits effectu\u00e9s par chaque auteur.</p> <pre><code>git shortlog\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-show","title":"<code>git show</code>","text":"<p>La commande <code>git show</code> affiche les modifications apport\u00e9es lors d'un commit sp\u00e9cifique. Elle affiche les informations sur le commit ainsi que les diff\u00e9rences de code entre le commit et son parent.</p> <pre><code>git show &lt;hash_commit&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-rm","title":"<code>git rm</code>","text":"<p>La commande <code>git rm</code> permet de supprimer un fichier de votre projet Git. Elle supprime le fichier de la zone de staging et du r\u00e9pertoire de travail.</p> <pre><code>git rm &lt;nom_fichier&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-merge","title":"<code>git merge</code>","text":"<p>La commande <code>git merge</code> permet de fusionner une branche avec la branche actuelle. Elle combine les modifications des deux branches en cr\u00e9ant un nouveau commit de fusion.</p> <pre><code>git merge &lt;branche&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-diff","title":"<code>git diff</code>","text":"<p>La commande <code>git diff</code> affiche les diff\u00e9rences entre deux commits, entre une branche et un commit, ou entre deux branches. Elle affiche les lignes de code ajout\u00e9es, modifi\u00e9es ou supprim\u00e9es.</p> <pre><code>git diff &lt;commit1&gt; &lt;commit2&gt;\ngit diff &lt;branche&gt; &lt;commit&gt;\ngit diff &lt;branche1&gt; &lt;branche2&gt;\n</code></pre>"},{"location":"2.%20Notions%20de%20base/listingcommand/#git-rebase","title":"<code>git rebase</code>","text":"<p>La commande <code>git rebase</code> permet de rejouer les commits d'une branche sur une autre branche. Elle r\u00e9applique les commits de la branche sur le dessus de la branche cible.</p> <pre><code>git rebase &lt;branche_cible&gt; \n</code></pre>"},{"location":"2.%20Notions%20de%20base/modeleDecentralise/","title":"Mod\u00e8le d\u00e9centralis\u00e9","text":"<p>Il existe deux mod\u00e8les, le centralis\u00e9 et le d\u00e9centralis\u00e9.</p> <ul> <li>Centralis\u00e9 : Centralisation du code source du projet, les utilisateurs doivent se connecter au serveur pour travailler dessus. Exemple : SVN</li> </ul> <pre><code>\nflowchart TD;\n    A[SVN Repository] -- update --&gt; B[Working copy&lt;br/&gt;&lt;b&gt;User 3&lt;/b&gt;&lt;br/&gt;WorkStation/PC#3]\n    A -- update --&gt; C[Working copy&lt;br/&gt;&lt;b&gt;User 1&lt;/b&gt;&lt;br/&gt;WorkStation/PC#1]\n    A -- update --&gt; D[Working copy&lt;br/&gt;&lt;b&gt;User 2&lt;/b&gt;&lt;br/&gt;WorkStation/PC#2]\n    B -- commit --&gt; A\n    C -- commit --&gt; A\n    D -- commit --&gt; A\n    A --- E{{checkout}}\n    E --&gt; B\n    classDef title fill:#4472C4,stroke:#4472C4,color:#fff;\n    classDef checkout color:#ff0000,fill:none,stroke:#ff0000;\n    class A title\n    class E checkout</code></pre> <ul> <li>D\u00e9centraliser : Le code source est h\u00e9berg\u00e9 sur un serveur distant, les utilisateurs sont cette fois invit\u00e9 \u00e0 t\u00e9l\u00e9charger les fichiers pour pouvoir travailler de leurs cot\u00e9s. Exemple : GitHub</li> </ul> <pre><code>---\ntitle: Distributed Version Control / Main Server Repository\n---\nflowchart TD;\n    outside[(SERVER GIT)]\n    subgraph 1\n        bottom1([Copied Files&lt;br&gt;Collaborator #1 &lt;br&gt; local repository]) -- commit --&gt; top1[(&lt;b&gt;PC 1&lt;/b&gt;)]\n        top1 -- update --&gt; bottom1\n    end\n    subgraph 2\n        bottom2([Copied Files&lt;br&gt;Collaborator #2 &lt;br&gt; local repository]) -- commit --&gt; top2[(&lt;b&gt;PC 2&lt;/b&gt;)]\n        top2 -- update --&gt; bottom2\n    end\n    subgraph 3\n        bottom3([Copied Files&lt;br&gt;Collaborator #3 &lt;br&gt; local repository]) -- commit --&gt; top3[(&lt;b&gt;PC 3&lt;/b&gt;)]\n        top3 -- update --&gt; bottom3\n    end\n    outside === pp1{{&lt;i&gt;push to server&lt;br&gt; &amp; pull from server&lt;/i&gt;}}\n    outside === pp2{{&lt;i&gt;push to server&lt;br&gt; &amp; pull from server&lt;/i&gt;}}\n    outside === pp3{{&lt;i&gt;push to server&lt;br&gt; &amp; pull from server&lt;/i&gt;}}\n    pp1 === 1\n    pp2 === 2\n    pp3 === 3\n    3 o-- push &amp; pull --o 2\n    classDef server color:#ff0000,fill:none,stroke:#ff0000,stroke-width:5;\n    classDef lien color:#000,fill:none,stroke:#000;\n    classDef pc color:#0000ff,fill:#fff,stroke:#0000ff;\n    class outside server\n    class pp1,pp2,pp3 lien\n    class top1,top2,top3 pc\n</code></pre>"},{"location":"2.%20Notions%20de%20base/modeleDecentralise/#avantages-et-inconvenients-du-modele","title":"Avantages et inconv\u00e9nients du mod\u00e8le","text":"Avantages Inconv\u00e9nients - Plus rapide - Plus complexe - Plus de back-up - Gestion des droits d'acc\u00e8s - Travail hors ligne - Besoin de synchronisation - Flexible"},{"location":"2.%20Notions%20de%20base/modeleDecentralise/#git","title":".git","text":"<p><code>.git</code> est un r\u00e9pertoire utiliser par git, il contient toutes les informations n\u00e9cessaire \u00e0 git pour suivre les donn\u00e9es relatives au projet.</p>"},{"location":"2.%20Notions%20de%20base/raccourcis-Github-vers-les-issues-et-les-pulls-requests/","title":"Les raccourcis Github vers les issues et les pulls requests","text":""},{"location":"2.%20Notions%20de%20base/raccourcis-Github-vers-les-issues-et-les-pulls-requests/#les-pulls-requests","title":"Les Pulls Requests","text":"<p>Pour fermer une issue lors d'une pull request, il est possible d'ajouter dans la description l'un des mots suivants suivie du num\u00e9ro de l'issue :</p> <pre><code>close\ncloses\nclosed\nfix\nfixes\nfixed\nresolve\nresolves\nresolved\n</code></pre> <p>Exemple</p> <p><code>closes #10</code></p>"},{"location":"2.%20Notions%20de%20base/raccourcis-Github-vers-les-issues-et-les-pulls-requests/#raccourcis-clavier","title":"Raccourcis Clavier","text":"<p>Voici des raccourcis utile sur Github en utilisant le clavier :</p> <ul> <li>Pour aller sur la page des issues, il est possible de faire G+I</li> <li>Pour aller sur la page du code, il est possible de faire G+C</li> <li>Pour aller sur la page des pull request, il est possible de faire G+P</li> <li>Pour aller sur la page des notifications, il est possible de faire G+N</li> <li>Pour ouvrir la palette de commandes GitHub, il est possible de faire Ctrl+K et pour mac Cmd+K</li> <li>Si vous modifiez du texte Markdown, ouvrez la palette de commandes avec Ctrl+Alt+K et pour mac Cmd+Option+K</li> <li>Pour ouvrir la barre de recherche, il est possible de faire K ou /</li> </ul> <p>Sur une issue, il est possible d'appuyer sur :</p> <ul> <li>L pour ajouter des \u00e9tiquettes</li> <li>A pour assigner des contributeurs \u00e0 l'issue</li> <li>X pour lier une branche \u00e0 l'issue</li> </ul>"},{"location":"2.%20Notions%20de%20base/supprimer-branches-inutiles/","title":"Comment supprimer les branches qui ne servent plus \u00e0 rien ?","text":""},{"location":"2.%20Notions%20de%20base/supprimer-branches-inutiles/#problematique","title":"Probl\u00e9matique","text":"<p>Quand les PRs sont merg\u00e9es, on peut supprimer la branche de github. Mais en local on garde les branches supprim\u00e9es. Comment supprimer facilement les branches qui n'existent plus sur le remote ?</p>"},{"location":"2.%20Notions%20de%20base/supprimer-branches-inutiles/#suppression-de-toutes-les-branches-inutiles","title":"Suppression de toutes les branches inutiles","text":"<p>Pour supprimer les branche inutiles, nous utilisons la commande <code>git fetch -p</code>. Cette commande va supprimer les branches inutiles et vous afficher les nouvelles branches du projet.</p> <p></p>"},{"location":"3.%20Notions%20avanc%C3%A9es/branching-strategy/","title":"Branching strategy","text":"<p>Le branching strategy est une m\u00e9thode d'organisation, comment les branches sont organis\u00e9 et la fa\u00e7on dont on les fusionnent.</p> <p>L'id\u00e9e principale du branching strategy est de diviser le travail entre plusieurs branches, cela permet un d\u00e9veloppement plus facile sans conflict entre le travail de chacun, une bonne branching strategy permet une meilleur productivit\u00e9 au sein d'une \u00e9quipe.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/branching-strategy/#la-strategie-git-flow","title":"La strat\u00e9gie Git flow","text":"<pre><code>%%{init: { 'theme': 'base', 'themeVariables': {\n              'git0': '#72BE49',\n              'git1': '#1167BD',\n              'git2': '#B26EDF',\n              'git3': '#B26EDF',\n              'git4': '#F4D23E',\n              'git5': '#C62817',\n              'git6': '#ff00ff',\n              'git7': '#00ffff',\n              'gitBranchLabel0': '#ffffff',\n              'gitBranchLabel1': '#ffffff',\n              'gitBranchLabel2': '#ffffff',\n              'gitBranchLabel3': '#ffffff',\n              'gitBranchLabel4': '#ffffff',\n              'gitBranchLabel5': '#ffffff',\n              'gitBranchLabel6': '#ffffff',\n              'gitBranchLabel7': '#ffffff',\n              'gitBranchLabel8': '#ffffff',\n              'gitBranchLabel9': '#ffffff'\n       } } }%%\ngitGraph\n   commit id:\"v0.5\"\n   branch develop\n   checkout develop\n   commit id:\"dev_1\"\n   branch feature_1\n   checkout feature_1\n   commit id:\"feature_1.1\"\n   branch feature_2\n   checkout feature_2\n   commit id:\"feature_2.1\"\n   commit id:\"feature_2.2\"\n   commit id:\"feature_2.3\"\n   checkout feature_1\n   commit id:\"feature_1.2\"\n   checkout develop\n   commit id:\"dev_2\"\n   branch release\n   checkout release\n   commit id:\"release_v1\"\n   commit id:\"release_v2\"\n   checkout develop\n   merge release\n   merge feature_1\n   merge feature_2\n   checkout main\n   merge release\n   branch hotfix\n   checkout hotfix\n   commit id:\"hotfix_v1\"\n   checkout develop\n   merge hotfix\n   checkout main\n   merge hotfix\n\n\n\n</code></pre> <p>La strat\u00e9gie git flow s\u00e9pare le travail en 5 branches :</p> <ul> <li>Main pour les versions stables.</li> <li>Develop pour le d\u00e9veloppement continue.</li> <li>Feature, chaque fonctionnalit\u00e9 a impl\u00e9menter a sa propre branche</li> <li>Release pour verifier une nouvelle fonctionnalit\u00e9 avant sa publication</li> <li>Hotfix pour les correctifs de bug</li> </ul> <p>Cette m\u00e9thode permet un d\u00e9veloppement plus intuitif et simple d'oganisation. On notera que sur le git remote il n'y a que les branches d\u00e9veloppement et main (les autres sont des branches temporaires)</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/branching-strategy/#la-strategie-gitlab-flow","title":"La strat\u00e9gie Gitlab flow","text":"<pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n   commit id:\"v0.5\" tag:\"get features merge\"\n   branch pre_production\n   checkout pre_production\n   commit tag:\"deployed from main\" id:\"pp1\"\n   branch production\n   checkout production\n   commit tag:\"deployed from pre_production\" id:\"deploy_v1\"\n   checkout main\n   commit id:\"v1\"\n   checkout pre_production\n   merge main tag:\"deployed from main\"\n   checkout production\n   commit tag:\"deployed from pre_production\" id:\"deploy_v2\"\n   checkout main\n   commit id:\"v2\"\n\n</code></pre> <p>Gitlab flow est totalement diff\u00e9rent, il contient les branches suivantes :</p> <ul> <li>Production</li> </ul> <p>Repr\u00e9sente l'environnement stable o\u00f9 les versions approuv\u00e9es sont d\u00e9ploy\u00e9es pour les utilisateurs finaux (re\u00e7oit des merges de Pre-production approuv\u00e9es).</p> <ul> <li>Pre-production</li> </ul> <p>Sert \u00e0 tester les bug et \u00e0 les r\u00e9soudre, puis quand tout est r\u00e9solu et approuv\u00e9, la branche est merg\u00e9 sur Main et Production.</p> <ul> <li>Main</li> </ul> <p>Re\u00e7oit les features et les fix fait dans la Pre-production.</p> <ul> <li>Feature</li> </ul> <p>Ajout de fonctionnalit\u00e9s, puis merge sur Main.</p> <p>GitLab Flow est plus flexible que le git Flow, ce qui le rend adapt\u00e9 \u00e0 une vari\u00e9t\u00e9 de projets, tel que les projets plus petits et ceux qui n\u00e9cessitent une approche plus l\u00e9g\u00e8re de la gestion des branches.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/creer-un-template-d-issue/","title":"Les issue sur github","text":""},{"location":"3.%20Notions%20avanc%C3%A9es/creer-un-template-d-issue/#quest-ce-quun-issue","title":"Qu'est ce qu'un issue?","text":"<p>Un issue (probl\u00e8me en fran\u00e7ais) sur GitHub est une fonctionnalit\u00e9 qui permet aux utilisateurs de signaler des probl\u00e8mes, de sugg\u00e9rer des am\u00e9liorations ou de demander de nouvelles fonctionnalit\u00e9s pour un projet h\u00e9berg\u00e9 sur la plateforme GitHub. Il s'agit essentiellement d'une mani\u00e8re de suivre et de g\u00e9rer les discussions et les t\u00e2ches li\u00e9es \u00e0 un projet de d\u00e9veloppement collaboratif.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/creer-un-template-d-issue/#lutilite-dun-template","title":"L'utilit\u00e9 d'un template","text":"<p>Les templates (mod\u00e8les) d'issue sont des mod\u00e8les pr\u00e9-d\u00e9finis pour la cr\u00e9ation d'issues sur GitHub. Ils sont utilis\u00e9s pour standardiser la mani\u00e8re dont les probl\u00e8mes et les demandes sont signal\u00e9s, ce qui permet de recueillir des informations essentielles de mani\u00e8re coh\u00e9rente et de simplifier la gestion des issues.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/creer-un-template-d-issue/#creation-dun-template","title":"Cr\u00e9ation d'un template","text":"<p>Pour la cr\u00e9ation d'un template veuillez suivre les \u00e9tapes suivantes sur github :</p> <ul> <li> <p>Cliquez sur l'onglet \"Settings\"  de votre repo</p> </li> <li> <p>Scrollez jusqu'a la partie \"Features\"</p> </li> <li> <p>Cliquez sur le bouton bleu contenant \"Set up templates\" dans le sous onglet issue, puis selectionner \"Custom template\"</p> </li> <li> <p>Puis personnaliser votre mod\u00e8le.</p> </li> <li> <p>Enregistrez le mod\u00e8le. Une fois enregistr\u00e9, il sera disponible pour \u00eatre utilis\u00e9 lors de la cr\u00e9ation de nouvelles issues dans ce d\u00e9p\u00f4t.</p> </li> </ul>"},{"location":"3.%20Notions%20avanc%C3%A9es/hooks/","title":"Les Hooks","text":"<p>Les hooks permettent l'injection de scripts, n'importe quel langage est support\u00e9 tant qu'il est ex\u00e9cutable. Ils permettent d'automatiser certaines taches.</p> <p>Leur ex\u00e9cution est d\u00e9sactiv\u00e9e par d\u00e9faut avec l'extension <code>.sample</code>. Il suffit de supprimer l'extension pour l'activer.</p> <p>Emplacement de base : <code>.git/hooks</code></p> <p>Le nom des hooks est conventionnel, chaque fichier de script doit \u00eatre ex\u00e9cutable. Pour rappel pour rendre un fichier ex\u00e9cutable veuillez utiliser cette commande : <code>chmod +x nom_fichier</code></p> <p>Les hooks sont en local et ne sont pas copi\u00e9s lors du git clone. Il est donc important de bien les configurer pour toute l'\u00e9quipe et de trouver un moyen pour qu'ils restent \u00e0 jour pour les membres de l'\u00e9quipe.</p> <p>Les hooks <code>pre-</code> permettent de modifier l'action. Les hooks <code>post-</code> sont souvent utilis\u00e9s en tant que notification.</p> <p>Vous l'aurez compris les hooks <code>pre-</code> s'ex\u00e9cutent avant et les hooks <code>post-</code> apr\u00e8s une op\u00e9ration.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/hooks/#exemple","title":"Exemple :","text":"<p>Modifier le message des commits :     - Utiliser le hook <code>prepare-commit-msg.sample</code>     - Editer le fichier et supprimer le <code>.sample</code></p> <p>Empecher les erreurs de syntaxe lors d'un commit :      - Utiliser le hook <code>pre-commit.sample</code>     - Editer le fichier et supprimer le <code>.sample</code>     - Suivre les \u00e9tapes de ce guide, en prenant en compte le langage que vous voulez utiliser : Voir le lien</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/hooks/#un-lien-utile-vr","title":"Un lien utile :vr","text":"<p>Voici une liste des hooks existant avec leur utilit\u00e9 sur git : Voir le lien</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/","title":"Qu'est-ce que <code>git rebase</code> ?","text":""},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/#explication-generale","title":"Explication g\u00e9n\u00e9rale","text":"<p>La commande <code>git rebase</code> est utilis\u00e9e pour r\u00e9organiser l'historique des commits dans Git. Elle permet de d\u00e9placer, combiner ou modifier les commits d'une branche pour les appliquer sur une autre branche.</p> <p>Le rebasage (<code>git rebase</code>) fonctionne en prenant une branche (feature) et en la basant sur une autre branche (g\u00e9n\u00e9ralement main). Cela signifie que les commits de la branche de feature sont replac\u00e9s sur le dessus de la branche main, un par un.</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base', 'themeVariables': {\n              'tagLabelFontSize': '15px',\n              'git0': '#72BE49',\n              'git1': '#B26EDF',\n              'git2': '#B26EDF',\n              'git3': '#B26EDF',\n              'git4': '#F4D23E',\n              'git5': '#C62817',\n              'git6': '#ff00ff',\n              'git7': '#00ffff',\n              'gitBranchLabel0': '#ffffff',\n              'gitBranchLabel1': '#ffffff',\n              'gitBranchLabel2': '#ffffff',\n              'gitBranchLabel3': '#ffffff',\n              'gitBranchLabel4': '#ffffff',\n              'gitBranchLabel5': '#ffffff',\n              'gitBranchLabel6': '#ffffff',\n              'gitBranchLabel7': '#ffffff',\n              'gitBranchLabel8': '#ffffff',\n              'gitBranchLabel9': '#ffffff'\n       } } }%%\ngitGraph\n   commit id:\"v0\"\n   branch feature\n   commit id:\"feature_v1\"\n   commit id:\"feature_v2\"\n   checkout main\n   commit id:\"main_v1\"\n   commit id:\"main_v2\"\n   branch feature_rebased\n   checkout feature_rebased\n   commit id:\"feature_v1'\" type:REVERSE\n   commit id:\"feature_v2'\" tag:\"branch feature rebase sur main\" type:REVERSE\n\n</code></pre>"},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/#cas-dutilisation","title":"Cas d'utilisation","text":"<ol> <li>Imaginons que vous \u00eates sur une branche feature, vous travaillez sur votre branche de votre c\u00f4t\u00e9.</li> <li>Vous avez finis et que vous souhaitez int\u00e9grer votre fonctionnalit\u00e9 \u00e0 la branche main sauf que pendant que vous codiez sur votre branche feature, d'autres d\u00e9veloppeurs ont ajout\u00e9 leurs modifications \u00e0 la branche main.</li> <li>Alors, avant de fusionner votre branche feature et main, il faut faire un <code>git rebase</code> pour r\u00e9cup\u00e9rer les modifications qui ont \u00e9t\u00e9 faites sur main.</li> </ol> <p>D\u00e9tails de l'exemple</p> <ul> <li>Assurez-vous d'\u00eatre sur la branche feature en ex\u00e9cutant la commande suivante : <code>git checkout feature</code></li> <li>Mettez \u00e0 jour votre branche feature avec les derni\u00e8res modifications de main en utilisant la commande git rebase : <code>git rebase main</code></li> </ul> <p>Cette commande replacera les commits de la branche feature sur le dessus de la branche main, un par un. Si des conflits surviennent, vous devrez les r\u00e9soudre au fur et \u00e0 mesure.</p> <ul> <li>Apr\u00e8s avoir r\u00e9solu tous les conflits, ajoutez les fichiers modifi\u00e9s \u00e0 l'index en utilisant la commande git add : <code>git add .</code></li> <li>Continuez le processus de rebase en utilisant la commande git rebase --continue : <code>git rebase --continue</code></li> <li>Si vous souhaitez abandonner le rebase en cours, vous pouvez utiliser la commande <code>git rebase --abort</code></li> <li>Une fois le rebase termin\u00e9, vous pouvez fusionner votre branche feature dans la branche main en utilisant la commande <code>git merge</code> :</li> </ul> <pre><code>git checkout main git merge feature\n</code></pre> <p>C'est tout! Vous avez maintenant utilis\u00e9 git rebase pour r\u00e9organiser l'historique des commits et int\u00e9grer vos modifications de mani\u00e8re propre dans la branche principale.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/#lignes-de-commande","title":"Lignes de commande","text":"<ul> <li>Effectuer un rebase :</li> </ul> <pre><code>    git checkout feature\n    git rebase main\n</code></pre> <ul> <li>Pour continuer le processus de rebasage apr\u00e8s avoir r\u00e9solu les conflits</li> </ul> <pre><code>git rebase --continue\n</code></pre> <ul> <li>Annuler le rebase :</li> </ul> <pre><code>    git rebase --abort\n</code></pre>"},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/#git-rebase-i","title":"<code>git rebase -i</code>","text":"<ul> <li>Effectuer un rebase interactif.</li> </ul> <pre><code>    git checkout feature\n    git rebase -i HEAD~&lt;nombre de commit \u00e0 rebaser&gt;\n</code></pre> <p>Permet d'organiser les commits via un interface interactif d'une nouvelle branche avant de la fusionner proprement dans la branche principale</p> <p>Voici quelques-unes des actions les plus couramment utilis\u00e9es dans l'interface interactive de rebase :</p> <ul> <li><code>pick</code> : Conserver le commit tel quel.</li> <li><code>edit</code> : Arr\u00eater le r\u00e9base pour permettre la modification du commit.</li> <li><code>squash</code> : Combinez ce commit avec le commit pr\u00e9c\u00e9dent.</li> <li><code>reword</code> : Modifier le message du commit.</li> <li><code>drop</code> : Supprimer le commit.</li> <li><code>skip</code> : Le commit marqu\u00e9 comme \"skip\" sera exclu de la nouvelle version de l'historique.</li> </ul> <p>Exemple 1</p> <ul> <li>Supposons que vous ayez une branche avec les commits suivants :</li> </ul> <pre><code>flowchart LR\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G</code></pre> <ul> <li>Executer la commande suivante dans la branche feature :</li> </ul> <pre><code>git rebase -i HEAD~7\n</code></pre> <ul> <li>Git ouvrira un \u00e9diteur de texte avec une liste de commits et des actions \u00e0 c\u00f4t\u00e9 de chaque commit.</li> </ul> <pre><code>pick A Commit A\npick B Commit B\npick C Commit C\npick D Commit D\npick E Commit E\npick F Commit F\npick G Commit G\n</code></pre> <p>-Modifiez la liste des commits pour atteindre votre objectif. Dans ce cas, vous souhaitez renommer le commit \"A\", exclure le commit \"B\" du nouvel hsitorique, supprimer le commit \"C\" et fusionner \"D\" avec \"E\".</p> <pre><code>reword A Commit A\nskip B Commit B\ndrop C Commit C (Ou supprimer la ligne)\npick D Commit D\nsquash E Commit E\nedit F Commit F\npick G Commit G\n</code></pre> <ul> <li>Git vous demandera maintenant de modifier le message de commit du commit A.</li> <li>Le rebase s'arr\u00eatera au commit F. \u00c0 ce stade, vous pouvez apporter les modifications n\u00e9cessaires \u00e0 ce commit. Une fois les modifications effectu\u00e9es, vous pouvez les ajouter \u00e0 l'index et les valider \u00e0 l'aide des commandes suivantes :</li> </ul> <pre><code>git add &lt;fichiers_modifi\u00e9s&gt;\ngit commit --amend\n</code></pre> <ul> <li>Apr\u00e8s avoir effectu\u00e9 les modifications, continuez le r\u00e9base en utilisant la commande suivante :</li> </ul> <pre><code>git rebase --continue\n</code></pre> <ul> <li>Au final, on obtient :</li> </ul> <pre><code>flowchart LR\n    A --- D\n    D --- DE\n    DE --- F(F: commit modifi\u00e9)\n    F(F: commit modifi\u00e9) --- G</code></pre> <p>Exemple 2</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/#git-rebase-onto","title":"<code>git rebase --onto</code>","text":"<ul> <li>Effectuer un rebase plus puissant qui transmet des r\u00e9fs (points de rebase)</li> </ul> <pre><code>    git rebase &lt;base_To_Rebase&gt; --onto  &lt;originCommit_To_Start_Rebase&gt;\n</code></pre> <p>Exemple</p> <ul> <li>Vous avez une branche feature bas\u00e9e sur master.</li> <li>Vous souhaitez extraire certains commits sp\u00e9cifiques de la branche feature et les r\u00e9appliquer sur une nouvelle branche appel\u00e9e feature-amelioree.</li> <li>Vous voulez exclure les deux premiers commits de la branche feature.</li> <li>Cr\u00e9ez une nouvelle branche feature-amelioree \u00e0 partir de master</li> </ul> <pre><code>git checkout master\ngit checkout -b feature-amelioree\n</code></pre> <ul> <li>Utilisez git rebase --onto pour extraire les commits sp\u00e9cifiques de feature et les r\u00e9appliquer sur la nouvelle branche feature-amelioree, en excluant les deux premiers commits</li> </ul> <pre><code>git rebase --onto feature-amelioree HEAD~2 feature\n</code></pre> <p>La branche featureB est bas\u00e9e sur la branche featureA. Toutefois, nous r\u00e9alisons que featureB ne d\u00e9pend pas des changements dans featureA et pourrait \u00eatre d\u00e9riv\u00e9e de la branche principale. featureA est le \uff1c oldbase \uff1e. main devient le \uff1c newbase \uff1e, et featureB est r\u00e9f\u00e9renc\u00e9 pour ce vers quoi l'\u00e9l\u00e9ment HEAD de \uff1c newbase \uff1e pointera.</p>"},{"location":"3.%20Notions%20avanc%C3%A9es/rebase/#les-dangers-du-rebase","title":"Les dangers du rebase","text":"<ul> <li>En travaillant avec <code>git rebase</code>, il faut prendre en compte que les conflits de fusion peuvent devenir plus fr\u00e9quent lors d'un workflow de rebase.   Cela se produit si votre branche feature est \u00e9loign\u00e9e depuis trop longtemps de la branche main. En rebasant \u00e0 ce moment l\u00e0, le branche main contient de nombreux nouveaux commits qui sont en conflits avec la branche feature.</li> </ul> <p>Rebaser fr\u00e9quemment votre branche feature par rapport \u00e0 main et effectuer des validations fr\u00e9quentes pour ne pas rencontrer ce probl\u00e8me.</p> <ul> <li>Un autre danger avec <code>git rebase</code> est la perte de validations r\u00e9sultant de la r\u00e9\u00e9criture interactive de l'historique <code>git rebase -i</code>. L'ex\u00e9cution en mode int\u00e9ractif et l'ex\u00e9cution de sous-commandes telles que squash <code>git rebase --autosquash</code> et drop <code>git rebase --d</code> supprimeront les validations du journal imm\u00e9diat de votre branche. On peut penser que les commits ont \u00e9t\u00e9 d\u00e9finitivement disparu mais en utilisant <code>git reflog</code>, ces commits peuvent \u00eatre restaur\u00e9s et le rebase peut \u00eatre enti\u00e8rement annul\u00e9. Pour plus d'informations sur <code>git reflog</code>, consulter cette documentation:</li> </ul> <p>Git Rebase n'est pas dangereux en soi. Les probl\u00e8mes surgissent lorsque vous modifiez l'historique avec des rebases interactifs et que vous forcez ces modifications sur une branche partag\u00e9e, risquant d'\u00e9craser le travail des autres. C'est une pratique \u00e0 \u00e9viter.</p> <ul> <li>Pour aller plus loin</li> </ul> <p></p> <p>Sources : git-rebase &amp; atlassian</p>"},{"location":"4.%20Conventions/convention-de-commit/","title":"Convention de commit","text":"<p>Bien nommer un commit sur Git est important pour que les autres d\u00e9veloppeurs (ou vous-m\u00eame \u00e0 l'avenir) puissent rapidement comprendre ce que fait ce commit sans avoir \u00e0 lire tout le code. </p>"},{"location":"4.%20Conventions/convention-de-commit/#le-type","title":"Le type","text":"<p>Dans notre convention, nous allons typer nos commits.  Voici les diff\u00e9rents types possibles :</p> <ul> <li><code>feat</code> : Pour les nouvelles fonctionnalit\u00e9s ou ajouts.</li> <li><code>fix</code> : Pour les corrections de bugs</li> <li><code>refactor</code> :  Pour les modifications de code qui n'ajoutent ni ne corrigent de fonctionnalit\u00e9s, mais am\u00e9liorent la structure ou la lisibilit\u00e9 du code.</li> <li><code>docs</code> : Pour les mises \u00e0 jour de la documentation.</li> <li><code>style</code> : Pour les modifications de formatage, d'espacement ou de style de code qui n'affectent pas le comportement du code.</li> <li><code>test</code> :  Pour les ajouts ou les modifications de tests.</li> <li><code>chore</code> : Pour les t\u00e2ches de maintenance, les mises \u00e0 jour de d\u00e9pendances, etc.</li> </ul>"},{"location":"4.%20Conventions/convention-de-commit/#lissue","title":"L'issue","text":"<p>Si votre commit r\u00e9pond \u00e0 la demande d'une issue, alors on pr\u00e9cise entre parenth\u00e8ses le num\u00e9ro de celle-ci.  </p>"},{"location":"4.%20Conventions/convention-de-commit/#le-message","title":"Le message","text":"<p>Le message doit \u00eatre bref et descriptif, expliquant en quelques mots ce que fait le commit.</p>"},{"location":"4.%20Conventions/convention-de-commit/#conclusion","title":"Conclusion","text":"<p>Pour conclure nos commits aurons la structure <code>&lt;type&gt;(&lt;issue&gt;): &lt;message&gt;</code>.</p> <p>Exemple de commits</p> <p><pre><code>feat(36): Ajoute la fonction de connexion\n</code></pre> <pre><code>fix(2): Corrige le bug de validation du mot de passe\n</code></pre> <pre><code>refactor(78): R\u00e9organise la structure HTML de la barre de navigation\n</code></pre> <pre><code>docs(14): Met \u00e0 jour la documentation d'installation\n</code></pre> <pre><code>style(25): Corrige l'indentation et le formatage\n</code></pre> <pre><code>test(65): Ajoute des tests pour la fonction de d\u00e9connexion\n</code></pre> <pre><code>chore(98): Met \u00e0 jour les d\u00e9pendances\n</code></pre></p>"},{"location":"4.%20Conventions/convention-de-nommage/","title":"Convention de nommage","text":""},{"location":"4.%20Conventions/convention-de-nommage/#a-quoi-ca-sert","title":"\u00c0 quoi \u00e7a sert ?","text":"<p>Appliquer une convention de nommage est tr\u00e8s important pour permettre \u00e0 tous de comprendre facilement la disposition des fichiers, notamment lorsqu'un collaborateur rejoint le projet en cours de route.</p> <p>Veillez donc \u00e0 bien nommer vos branches, commits et issues :). </p>"},{"location":"4.%20Conventions/convention-de-nommage/#branche","title":"Branche","text":"<p>Pour le nommage de vos Branches, voici la structure utilis\u00e9e : </p> <ul> <li>XX-[nom-branche]</li> </ul> <p>Par exemple, pour la branche n\u00b014 : </p> <p>14-nom-de-la-branche</p>"},{"location":"4.%20Conventions/convention-de-nommage/#bravo","title":"Bravo","text":""}]}